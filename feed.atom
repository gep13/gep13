<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
	<link rel="self" href="http://www.gep13.co.uk/" />
	<id>http://www.gep13.co.uk/</id>
	<title>Gary Ewan Park</title>
	<rights>2019</rights>
	<updated>2019-01-11T15:35:27Z</updated>
	<subtitle>Ramblings and Ponderings of a Microsoft Fan Boy...</subtitle>
	<entry>
		<link href="http://www.gep13.co.uk/blog/what-are-all-the-chocolatey-repositories-for" />
		<id>http://www.gep13.co.uk/blog/what-are-all-the-chocolatey-repositories-for</id>
		<title>What are all the Chocolatey repositories for?</title>
		<updated>2019-01-11T00:00:00Z</updated>
		<content>&lt;p&gt;I recently received a Tweet:&lt;/p&gt;
&lt;blockquote class="twitter-tweet" data-lang="en"&gt;&lt;p lang="en" dir="ltr"&gt;I hope you don&amp;#39;t mind me saying, but Chocolatey has a pretty confusing structure. one of the reasons I feel hesitant to report issues on github repos is that I&amp;#39;m not sure were to put them. the one I have just opened is for example in the wrong place :(&lt;/p&gt;&amp;mdash; Foad Sojoodi Farimani (&amp;#64;fsfarimani) &lt;a href="https://twitter.com/fsfarimani/status/1083460818929360896?ref_src=twsrc%5Etfw"&gt;January 10, 2019&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;Which got me thinking... There are 35 repositories in the &lt;a href="https://github.com/chocolatey"&gt;GitHub Organisation for Chocolatey&lt;/a&gt;, and if you are new to Chocolatey, it can daunting to know which repository is for what.  So I thought I would go through each repository, providing a short description about what it is.  In the absence of anything better, I have ordered the list based on how many stars it has on GitHub.&lt;/p&gt;
&lt;p&gt;Let's get started...&lt;/p&gt;
&lt;h2 id="choco"&gt;&lt;a href="https://github.com/chocolatey/choco"&gt;choco&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This is the main GitHub Repository for Chocolatey.
It contains the source code for the Chocolatey CLI, which can be downloaded and installed using the &lt;a href="https://chocolatey.org/install"&gt;instructions on this page&lt;/a&gt;.
If you encounter any problems with Chocolatey, this is likely the first place to come to see if it is a known issue, or to create a new one.
If you are going to raise an issue, please ensure that you read the issue templates to see where the best place to get an answer to your question is.&lt;/p&gt;
&lt;h2 id="chocolatey"&gt;&lt;a href="https://github.com/chocolatey/chocolatey"&gt;chocolatey&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This is the original GitHub Repository for the Chocolatey project.
The first version of Chocolatey was written using PowerShell.
In 2014, Chocolatey was rewritten in C# and the decision was taken to create a new repository.
In all likelihood, you should never need to use this repository, and likely any issue that is created on this repository will need to be moved to the other repository mentioned above.
It has been left active/visible for reference only.&lt;/p&gt;
&lt;h2 id="boxstarter"&gt;&lt;a href="https://github.com/chocolatey/boxstarter"&gt;boxstarter&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This repository houses the source code for the Boxstarter project.
&lt;a href="https://boxstarter.org/"&gt;Boxstarter&lt;/a&gt; is built on top of Chocolatey, and it brings with it repeatable, reboot resilient Windows environment installations.
This project was originally started in 2012 by &lt;a href="https://twitter.com/mwrockx"&gt;Matt Wrock&lt;/a&gt;, but in 2018 this project &lt;a href="https://chocolatey.org/blog/boxstarter-moves-under-chocolatey-github-organization"&gt;moved&lt;/a&gt; under the Chocolatey GitHub Organisation.
You would use this repository for anything related to the Boxstarter project.&lt;/p&gt;
&lt;h2 id="chocolateygui"&gt;&lt;a href="https://github.com/chocolatey/ChocolateyGUI"&gt;ChocolateyGUI&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This repository houses the source code for the Chocolatey GUI project.
Chocolatey GUI is a WPF application that works alongside Chocolatey, and provides a visual interface to interact with Chocolatey.
This includes the ability to list/install/upgrade/uninstall Chocolatey Packages.
As well as the ability to add/remove Chocolatey Sources, and enable/disable Chocolatey features.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://gep13wpstorage.blob.core.windows.net/gep13/2019/01/11/chocolatey-gui.png" class="img-fluid" alt="Chocolatey GUI" /&gt;&lt;/p&gt;
&lt;h2 id="chocolatey.org"&gt;&lt;a href="https://github.com/chocolatey/chocolatey.org"&gt;chocolatey.org&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This repository houses the source code for the Chocolatey Community Repository, i.e. &lt;a href="https://chocolatey.org/"&gt;chocolatey.org&lt;/a&gt;.
This is an ASP.NET MVC application, and you would use this repository to ask any questions about the website itself.
&lt;strong&gt;NOTE:&lt;/strong&gt; You should not use this repository to report problems with a particular Chocolatey package.
That should be done by following up with the package maintainer directly.&lt;/p&gt;
&lt;h2 id="chocolatey-coreteampackages"&gt;&lt;a href="https://github.com/chocolatey/chocolatey-coreteampackages"&gt;chocolatey-coreteampackages&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This repository houses the source code for all the packages on chocolatey.org that are maintained by the &lt;a href="https://chocolatey.org/profiles/chocolatey"&gt;chocolatey&lt;/a&gt; user.
This repository is maintained by a dedicated set of volunteers.
It makes use of the &lt;a href="https://github.com/majkinetor/au"&gt;AU&lt;/a&gt; updating system.
As a result, all packages in this repository are checked for new versions every 6 hours, meaning that hundreds of packages are constantly kept up to date.&lt;/p&gt;
&lt;h2 id="chocolatey-cookbook"&gt;&lt;a href="https://github.com/chocolatey/chocolatey-cookbook"&gt;chocolatey-cookbook&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This repository houses the source code for the &lt;a href="https://www.chef.io/"&gt;Chef&lt;/a&gt; Cookbook.
This allows the installation and maintenance of Chocolatey Packages using Chef.
You can find out more information about using this &lt;a href="https://docs.chef.io/resource_chocolatey_package.html"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="cchoco"&gt;&lt;a href="https://github.com/chocolatey/cChoco"&gt;cChoco&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This repository houses the source code for the Chocolatey DSC Resource.
This allows you to easy install Chocolatey packages while making use of DSC.&lt;/p&gt;
&lt;h2 id="puppet-chocolatey"&gt;&lt;a href="https://github.com/chocolatey/puppet-chocolatey"&gt;puppet-chocolatey&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This repository houses the official module for working with Chocolatey in Puppet.
This module allow the installation of Chocolatey, management of Chocolatey config and features, and also install/update of packages.&lt;/p&gt;
&lt;h2 id="choco-wiki"&gt;&lt;a href="https://github.com/chocolatey/choco-wiki"&gt;choco-wiki&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This repository is a clone of the Wiki that is available &lt;a href="https://github.com/chocolatey/choco/wiki"&gt;here&lt;/a&gt;.
This allows us to accept contributions to the Wiki in a way that can be administrated.
The contents of this repository are ultimately rendered in the website &lt;a href="https://chocolatey.org/docs"&gt;here&lt;/a&gt;.
If you want/need to change any documentation in this section of the website, this is where a PR would be raised, or issue created.&lt;/p&gt;
&lt;h2 id="chocolatey-test-environment"&gt;&lt;a href="https://github.com/chocolatey/chocolatey-test-environment"&gt;chocolatey-test-environment&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This repository houses the local Chocolatey Test Environment, which is essentially a vagrant setup which allows you to test your Chocolatey packages.
This is the same test environment that is used by the automated moderation process when you submit a package to chocolatey.org.
If you are running into any issues with packages failing when you push them to chocolatey.org, this is the recommended way to figure out what is going on.
For more information about the moderation process for chocolatey.org you can watch this video:&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/35JiK0AdGqM" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;
&lt;h2 id="chocolatey-oneget"&gt;&lt;a href="https://github.com/chocolatey/chocolatey-oneget"&gt;chocolatey-oneget&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This repository houses the source code for the OneGet (a.k.a Package Management) Provider for Chocolatey.
If you are interested in helping with this provider, this is where you would start, as we are looking for help with this provider.
Please take note of the warnings in the readme of this repository.&lt;/p&gt;
&lt;h2 id="shimgen"&gt;&lt;a href="https://github.com/chocolatey/shimgen"&gt;shimgen&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;One of the tools that ships with Chocolatey is called shimgen.
Shimgen is a tool that makes batch redirection not suck so much by generating shims that point to target executable files.
Shimgen is a commercial tool provided by RealDimensions Software, LLC (RDS) for free use with the Chocolatey client.
This repository serves as a location to raise any issues with the shimgen tool.
It does not house the source code for this tool.&lt;/p&gt;
&lt;h2 id="chocolatey-package-requests"&gt;&lt;a href="https://github.com/chocolatey/chocolatey-package-requests"&gt;chocolatey-package-requests&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The is no source code in this repository.
Rather, this repository houses a list of issues for software applications that people would like to see added to chocolatey.org.
The idea is that anyone interested in helping with the creation of a Chocolatey package can select one from this list.&lt;/p&gt;
&lt;h2 id="chocolateytemplates"&gt;&lt;a href="https://github.com/chocolatey/chocolateytemplates"&gt;chocolateytemplates&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The is an older repository that houses a set of warmup templates for creating Chocolatey packages.
As of today, creating a Chocolatey package is best done using the &lt;a href="https://chocolatey.org/docs/commands-new"&gt;choco new&lt;/a&gt;, so most likely you will not need to use it.&lt;/p&gt;
&lt;h2 id="simple-server"&gt;&lt;a href="https://github.com/chocolatey/simple-server"&gt;simple-server&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This repository houses the source code for a website known as the Chocolatey Simple Server, which is also known as chocolatey.server.
This is an application that you can use to house Chocolatey packages locally in your environment, rather than using chocolatey.org.
This is similar to applications like Nexus, Artifactory or ProGet.
However, this is a very basic application, that doesn't have all the features of these other applications.&lt;/p&gt;
&lt;h2 id="chocolatey-packages-template"&gt;&lt;a href="https://github.com/chocolatey/chocolatey-packages-template"&gt;chocolatey-packages-template&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If you are interested in maintaining your own Chocolatey Packages, this repository houses a sample for how to setup your own repository.
The idea would be that you fork this repository, and tailor it to your own needs.
This repository has the suggested setup for both ketarin and AU, both of which are described &lt;a href="https://chocolatey.org/docs/automatic-packages"&gt;here&lt;/a&gt;.
As of today, the main recommendation for automatic packaging is AU, as such, if you are starting your own repository, perhaps best to start with this &lt;a href="https://github.com/majkinetor/au-packages-template"&gt;template&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="package-validator"&gt;&lt;a href="https://github.com/chocolatey/package-validator"&gt;package-validator&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This repository houses the source code for the package-validator windows service.
This is one of the automatic moderation processes that all packages submitted to chocolatey.org go through.
For more information on this, see the video further up in this blog post.
You would raise issues here if you find any problems with this service.&lt;/p&gt;
&lt;h2 id="package-verifier"&gt;&lt;a href="https://github.com/chocolatey/package-verifier"&gt;package-verifier&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This repository houses the source code for the package-verifier windows service.
This is one of the automatic moderation processes that all packages submitted to chocolatey.org go through.
For more information on this, see the video further up in this blog post.
You would raise issues here if you find any problems with this service.&lt;/p&gt;
&lt;h2 id="nuget-chocolatey"&gt;&lt;a href="https://github.com/chocolatey/nuget-chocolatey"&gt;nuget-chocolatey&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This repository houses a copy of the NuGet Source Code.
Chocolatey is built on top of the NuGet Client libraries, and as such, it maintains a copy of those libraries, as some changes had to be made to make it work for Chocolatey.
As changes are made in the upstream NuGet Source Code, the relevant changes will be pulled into this repository so that they can be used in Chocolatey.&lt;/p&gt;
&lt;h2 id="puppet-chocolatey_server"&gt;&lt;a href="https://github.com/chocolatey/puppet-chocolatey_server"&gt;puppet-chocolatey_server&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This repository houses the source code for a Puppet Module that can be used to automatically install/configure the chocolatey.server package.
This means, assuming you are using Puppet, you can very quickly get up and running with this application.&lt;/p&gt;
&lt;h2 id="puppet-chocolatey-handsonlab"&gt;&lt;a href="https://github.com/chocolatey/puppet-chocolatey-handsonlab"&gt;puppet-chocolatey-handsonlab&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This is the source code for a hands on lab that was hosted at PuppetConf 2013 regarding the chocolatey provider.&lt;/p&gt;
&lt;h2 id="chocolatey-licensed-issues"&gt;&lt;a href="https://github.com/chocolatey/chocolatey-licensed-issues"&gt;chocolatey-licensed-issues&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There is no source code in this repository.
Instead, this houses a list of issues that have been raised against the licensed versions of Chocolatey.
This gives a means of allowing people interested in issues raised with the licensed versions to follow when these issues have been resolved.&lt;/p&gt;
&lt;h2 id="chocobot-gitter"&gt;&lt;a href="https://github.com/chocolatey/chocobot-gitter"&gt;chocobot-gitter&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Within the various Gitter rooms that exist for Chocolatey, for example the &lt;a href="https://gitter.im/chocolatey/choco"&gt;main one&lt;/a&gt;, there is a Hubot instance running.
This is really just a little bit of fun, as the Hubot instance doesn't actually have any automation capabilities.
This repository contains the source code for the Hubot instance.&lt;/p&gt;
&lt;h2 id="chocolatey-packages-recipes"&gt;&lt;a href="https://github.com/chocolatey/chocolatey-package-recipes"&gt;chocolatey-packages-recipes&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Have you ever had to deal with a really hard application to package as a Chocolatey Package?
Or, have you ever been very happy with the outcome of a package that you created?
If so, and you are willing to share that work with others, this repository is a place to show them off.
At the time of writing, this repository houses examples of house to package Office 365 and Visual Studio 2017.&lt;/p&gt;
&lt;h2 id="package-cleanup"&gt;&lt;a href="https://github.com/chocolatey/package-cleanup"&gt;package-cleanup&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This repository houses the source code for the package-cleanup windows service.
This is one of the automatic moderation processes that all packages submitted to chocolatey.org go through.
For more information on this, see the video further up in this blog post.
You would raise issues here if you find any problems with this service.&lt;/p&gt;
&lt;h2 id="chocolatey-package-updater"&gt;&lt;a href="https://github.com/chocolatey/chocolatey-package-updater"&gt;chocolatey-package-updater&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Similar to the shimgen repository, this repository houses an issues list for the chocolatey-package-updater tool.
This tool is closed source, but free to use for maintaining Chocolatey packages.
This is normally used when using the ketarin application to update packages.&lt;/p&gt;
&lt;h2 id="chocolatey.github.com"&gt;&lt;a href="https://github.com/chocolatey/chocolatey.github.com"&gt;chocolatey.github.com&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This is a deprecated repository, that no longer is used, and is kept around for reference only.
It used to house the source code for a documentation site for Chocolatey, however, this is replaced with the &lt;a href="https://chocolatey.org/docs"&gt;docs site&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="chocolatey-book"&gt;&lt;a href="https://github.com/chocolatey/chocolatey-book"&gt;chocolatey-book&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This repository hasn't really seen much traffic yet.
The idea was that this repository would house a walkthrough book on house to use Chocolatey.
If you are interested in helping with this effort, then definitely reach out.&lt;/p&gt;
&lt;h2 id="chocolatey.web"&gt;&lt;a href="https://github.com/chocolatey/chocolatey.web"&gt;chocolatey.web&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In all honesty, I am not entirely sure what this repository is for.
If I find out, I will update this section with more information.&lt;/p&gt;
&lt;h2 id="chocolatey-environments"&gt;&lt;a href="https://github.com/chocolatey/chocolatey-environments"&gt;chocolatey-environments&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This is a reasonably new repository.
The intention is that this will house example vagrant environments that can be used to testing out the various parts of Chocolatey.
The first example environment in this repository shows how to setup a system for automated package internalization in your own environment.&lt;/p&gt;
&lt;h2 id="nuget.server-chocolatey"&gt;&lt;a href="https://github.com/chocolatey/NuGet.Server-chocolatey"&gt;NuGet.Server-chocolatey&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This is a fork of the NuGet.Server that was made by the NuGet team.
It was updated to work with Chocolatey.
This is &amp;quot;similar&amp;quot; to the simple.server repository, but there are some distinct differences.&lt;/p&gt;
&lt;h2 id="chocobot-slack"&gt;&lt;a href="https://github.com/chocolatey/chocobot-slack"&gt;chocobot-slack&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This is similar to the chocobot-gitter repository.
The only difference being that this Hubot instance is for Slack, rather than Gitter.&lt;/p&gt;
&lt;h2 id="cla-assistant"&gt;&lt;a href="https://github.com/chocolatey/cla-assistant"&gt;cla-assistant&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In order to ensure that everyone that contributes to Chocolatey has signed the CLA that we have in place, we run this CLA assistant.&lt;/p&gt;
&lt;h2 id="chocolatey-webhooks"&gt;&lt;a href="https://github.com/chocolatey/chocolatey-webhooks"&gt;chocolatey-webhooks&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;chocolatey-webhooks acts as a relay from GitHub and other services to Jira and Trello, so that events on a Github project automatically create and update Jira issues or Trello cards.
This is a work in progress repository, and isn't currently actively being used.&lt;/p&gt;
</content>
		<summary>&lt;p&gt;I recently received a Tweet:&lt;/p&gt;</summary>
	</entry>
	<entry>
		<link href="http://www.gep13.co.uk/blog/2018-a-retrospective" />
		<id>http://www.gep13.co.uk/blog/2018-a-retrospective</id>
		<title>2018 - A Retrospective</title>
		<updated>2019-01-01T00:00:00Z</updated>
		<content>&lt;p&gt;When I was growing up, I always thought it was a cliché to hear people say that &lt;code&gt;the year has passed SO quickly&lt;/code&gt;, but this year, I got to witness this first hand.  2018 passed VERY quickly!&lt;/p&gt;
&lt;p&gt;&lt;img src="https://gep13wpstorage.blob.core.windows.net/gep13/2019/01/01/The-Girls.png" class="img-fluid" alt="The Girls" /&gt;&lt;/p&gt;
&lt;p&gt;It is hard to believe that our eldest child is away to Primary School and our youngest is almost 2!  Where has this time gone!?!?&lt;/p&gt;
&lt;p&gt;One of the best side effects of now working from home is that I get to spend more time with these two incredible children, including doing things like the school drop offs, etc, things that I would never have been able to do in previous job.  I am very thankful for getting to spend more time with these two, as well as obviously my wife.&lt;/p&gt;
&lt;h2 id="looking-back-on-2018"&gt;Looking back on 2018&lt;/h2&gt;
&lt;p&gt;2018 as been a VERY busy year, in which there have been some highs, and some lows (there were two deaths in our family this year).&lt;/p&gt;
&lt;p&gt;As per the &lt;a href="https://www.gep13.co.uk/blog/2017-a-retrospective"&gt;post&lt;/a&gt; that I did last year, this post is a brief recap, in no particular order, of some of the highlights of 2018.&lt;/p&gt;
&lt;h2 id="started-working-at-chocolatey"&gt;Started working at Chocolatey&lt;/h2&gt;
&lt;p&gt;In January, I started &lt;a href="https://www.gep13.co.uk/blog/and-so-the-adventure-begins"&gt;working for Chocolatey&lt;/a&gt; full time.  This was a huge step for me, and I am very happy to say that it has been going very well, and I am excited to see what 2019 has in store for us all.  Throughout 2018, the Chocolatey Team has expanded, and it is looking set to expand further in 2019.  Some very exciting times ahead.&lt;/p&gt;
&lt;p&gt;As a result of starting to work from home, this saw a conversation of half of our garage from this:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://gep13wpstorage.blob.core.windows.net/gep13/2019/01/01/Office.png" class="img-fluid" alt="Office Before" /&gt;&lt;/p&gt;
&lt;p&gt;into this:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://gep13wpstorage.blob.core.windows.net/gep13/2019/01/01/Office1.png" class="img-fluid" alt="Office After" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://gep13wpstorage.blob.core.windows.net/gep13/2019/01/01/Office2.png" class="img-fluid" alt="Office After" /&gt;&lt;/p&gt;
&lt;p&gt;It has been a busy year for Chocolatey, starting off with me travelling to Kansas to spend a week with Rob, as an introduction.  Since then we have been busy working on new releases across all Chocolatey components, with my main focus being on Chocolatey Central Management, which is now available in beta for customers to trial out.  In addition, we released a new version of &lt;a href="https://www.gep13.co.uk/blog/chocolatey-gui-v0.16.0-released"&gt;Chocolatey GUI&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="speaking-tour"&gt;Speaking Tour&lt;/h2&gt;
&lt;p&gt;Starting in January, and going into February, I went &lt;a href="https://www.gep13.co.uk/blog/2018-speaking-tour"&gt;on the road&lt;/a&gt; and presented at a number of .Net User Groups.  This included talks on both Chocolatey and Cake.  This was my first time doing anything like this, but I had such a good time, that I am planning on doing the same thing in 2019.  Stay tuned for more information on this.&lt;/p&gt;
&lt;h2 id="powershell-summit"&gt;PowerShell Summit&lt;/h2&gt;
&lt;p&gt;I had heard a lot of good things about the PowerShell Summit, and I am happy to say that I wasn't disappointed.  This was a great event!  It was a chance to meet a lot of people from the community, far too many to mention here.  If you are on the fence about attending this event in 2019, I would definitely suggest that you jump at the chance while there are still tickets available.&lt;/p&gt;
&lt;p&gt;Chocolatey was a sponsor at this event:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://gep13wpstorage.blob.core.windows.net/gep13/2019/01/01/PowerShellSummit-Sponsor.png" class="img-fluid" alt="PowerShell Summit Sponsor" /&gt;&lt;/p&gt;
&lt;p&gt;and it was a great opportunity to speak to people who are currently using Chocolatey, and also to introduce it to people who are not yet using it.&lt;/p&gt;
&lt;p&gt;It was on this trip that I saw one of the most bizarre things I have ever seen...&lt;/p&gt;
&lt;p&gt;&lt;img src="https://gep13wpstorage.blob.core.windows.net/gep13/2019/01/01/PowerShellSummit-BubbleGum.png" class="img-fluid" alt="PowerShell Summit Bubble Gum Wall" /&gt;&lt;/p&gt;
&lt;p&gt;Yes, that is actually an entire wall covered in bubble gum.  The smell in that alley was crazy!&lt;/p&gt;
&lt;h2 id="trip-to-sweden"&gt;Trip to Sweden&lt;/h2&gt;
&lt;p&gt;In June, I made a trip to the DevOps Usergroup Gothenburg to visit my friend &lt;a href="https://twitter.com/devlead"&gt;Mattias Karlsson&lt;/a&gt; and present a talk on Chocolatey:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://gep13wpstorage.blob.core.windows.net/gep13/2019/01/01/Dough-Sign.png" class="img-fluid" alt="DOUGH Sign" /&gt;&lt;/p&gt;
&lt;p&gt;I had never been to Sweden before, and I thoroughly enjoyed this trip!&lt;/p&gt;
&lt;h2 id="that-conference"&gt;That Conference&lt;/h2&gt;
&lt;p&gt;Bottom line... this was a great event, and I would thoroughly recommend anyone attending it.  Everything about the conference was well organised, and the talks were very high quality.&lt;/p&gt;
&lt;p&gt;At this event, I helped run a Chocolatey Workshop along with &lt;a href="https://twitter.com/ferventcoder"&gt;Rob Reynolds&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://gep13wpstorage.blob.core.windows.net/gep13/2019/01/01/ThatConference-Workshop.png" class="img-fluid" alt="That Conference Workshop" /&gt;&lt;/p&gt;
&lt;p&gt;One of the highlights of the event had to be the bacon covered in chocolate:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://gep13wpstorage.blob.core.windows.net/gep13/2019/01/01/ThatConference-ChocolateyBacon.png" class="img-fluid" alt="That Conference Chocolate Bacon" /&gt;&lt;/p&gt;
&lt;h2 id="chocolatey-fest-and-puppetize-live"&gt;Chocolatey Fest and Puppetize Live&lt;/h2&gt;
&lt;p&gt;My fourth trip to the States in 2018 was to attend the inaugural &lt;a href="https://chocolateyfest.com/"&gt;Chocolatey Fest&lt;/a&gt; Conference and Puppetize Live events.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://gep13wpstorage.blob.core.windows.net/gep13/2019/01/01/ChocolateyFest-Registration.png" class="img-fluid" alt="Chocolatey Fest Registration" /&gt;&lt;/p&gt;
&lt;p&gt;The feedback from the event was very positive, so all the hard work that went into the organistaion was definitely worth it.  There was even some signature Chocolatey coins:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://gep13wpstorage.blob.core.windows.net/gep13/2019/01/01/ChocolateyFest-Coin.png" class="img-fluid" alt="Chocolatey Fest Coin" /&gt;&lt;/p&gt;
&lt;p&gt;At this event was also the first run of a &lt;a href="https://github.com/gep13/chocolatey-internalizer-workshop"&gt;Chocolatey Workshop&lt;/a&gt; that myself and &lt;a href="https://twitter.com/pauby"&gt;Paul Broadwith&lt;/a&gt; were doing.  This focused on how you can use Chocolatey internally within your Organisation, and ensure consistent and reliable installations by internalizing packages.&lt;/p&gt;
&lt;h2 id="winops-conf"&gt;WinOps Conf&lt;/h2&gt;
&lt;p&gt;This was my fourth year attending the WinOps Conference (this is getting to be a habit), and once again, it didn't disappoint.  Lots of conversations were had, and the talks that I attended were of a very high standard.  This year was slightly different in that I was presenting a &lt;a href="https://github.com/gep13/chocolatey-internalizer-workshop"&gt;workshop&lt;/a&gt; along with &lt;a href="https://twitter.com/pauby"&gt;Paul Broadwith&lt;/a&gt;.  This was our second time doing this workshop, and we incorporated a number of feedback points from our first outing, and I think it was a lot better this time around.&lt;/p&gt;
&lt;p&gt;Chocolatey also had a booth at the event, where we were able to talk to lots of people interested in using Chocolatey.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://gep13wpstorage.blob.core.windows.net/gep13/2019/01/01/WinOps-Chocolatey.png" class="img-fluid" alt="WinOps Chocolatey" /&gt;&lt;/p&gt;
&lt;h2 id="microsoft-mvp"&gt;Microsoft MVP&lt;/h2&gt;
&lt;p&gt;In July, I was very happy to be informed that I was being renewed as a Microsoft MVP.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://gep13wpstorage.blob.core.windows.net/gep13/2019/01/01/MVP-Profile.png" class="img-fluid" alt="MVP Profile" /&gt;&lt;/p&gt;
&lt;p&gt;In all honesty, this wasn't something that I was expecting, and I was very excited to get the email letting me know.  In August, the MVP Package arrived in the post, and I was able to add to my main MVP award:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://gep13wpstorage.blob.core.windows.net/gep13/2019/01/01/MVP-Award.png" class="img-fluid" alt="MVP Award" /&gt;&lt;/p&gt;
&lt;p&gt;I thought the instructions on how to do this were very useful:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://gep13wpstorage.blob.core.windows.net/gep13/2019/01/01/MVP-Instructions.png" class="img-fluid" alt="MVP Instructions" /&gt;&lt;/p&gt;
&lt;p&gt;However, the alternative version on Twitter was also very funny!&lt;/p&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Sorry &lt;a href="https://twitter.com/MVPAward?ref_src=twsrc%5Etfw"&gt;&amp;#64;MVPAward&lt;/a&gt;, I just had to do this. &lt;a href="https://t.co/kTiwoqYIO3"&gt;pic.twitter.com/kTiwoqYIO3&lt;/a&gt;&lt;/p&gt;&amp;mdash; diederik krols (&amp;#64;diederikkrols) &lt;a href="https://twitter.com/diederikkrols/status/1018059116596613120?ref_src=twsrc%5Etfw"&gt;July 14, 2018&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;I also very happy to be attending the MVP Summit in March.  I wasn't able to attend this in 2018 due to other commitments, and I heard from other MVP's that I know that it was very good, so excited about attending in 2019.&lt;/p&gt;
&lt;h2 id="open-source-contributions"&gt;Open Source Contributions&lt;/h2&gt;
&lt;p&gt;This year I am very happy to say that I shipped quite a few things (some which have been on the back burner for a while, and others that are brand new).  These included:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.gep13.co.uk/blog/introducing-cake.eazfuscator.net-addin"&gt;Cake.Eazfuscator.Net Addin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.gep13.co.uk/blog/introducing-cake.discord-addin"&gt;Cake.Discord Addin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.gep13.co.uk/blog/introducing-cake.dotnettool.module"&gt;Cake.DotNetTool.Module&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.gep13.co.uk/blog/introducing-chocolatey-vscode-extension"&gt;Chocolatey VS Code Extension&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.gep13.co.uk/blog/introducing-chocolatey-azure-devops-extension"&gt;Chocolatey Azure DevOps Extension&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.gep13.co.uk/blog/introducing-ci-cd-assets-repository-and-vscode-extension"&gt;CI/CD Assets VS Code Extension&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.gep13.co.uk/blog/introducing-cake-recipe-vscode-extension"&gt;Cake.Recipe VS Code Extension&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.gep13.co.uk/blog/gitreleasemanager-release-0.8.0"&gt;GitReleaseManager 0.8.0&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In addition, I also got access to the &lt;a href="https://developer.github.com/actions/"&gt;GitHub Actions Beta&lt;/a&gt;, and I was able to create an &lt;a href="https://www.gep13.co.uk/blog/getting-started-with-github-actions"&gt;action specifically for Cake&lt;/a&gt;, which allows you to run a Cake script as a result of an action on your repository.  I showed an example of how you could &lt;a href="https://www.gep13.co.uk/blog/using-cake-github-action"&gt;send out a Tweet&lt;/a&gt;, based on a milestone being closed on your repository.&lt;/p&gt;
&lt;p&gt;I seem to be on a little bit of a run of creating Visual Studio Code extensions.  They are very easy to create, and can be as complicated or simple as you want.  I have at least one more idea for another extension that I am going to try to find time for in 2019.  In terms of download numbers for the extensions, these can be seen here:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://gep13wpstorage.blob.core.windows.net/gep13/2019/01/01/Visual-Studio-Marketplace.png" class="img-fluid" alt="Visual Studio Marketplace" /&gt;&lt;/p&gt;
&lt;p&gt;I was secretly hoping to get to 3000 downloads for the Chocolatey VS Code Extension, but didn't quite get there in 2018, but hopefully this year!  I am very happy with the download number for the Chocolatey Azure DevOps Extension.  This was an &amp;quot;itch&amp;quot; that I had been wanting to scratch for a while to get a fully working Chocolatey implementation for Azure DevOps, and I was very happy to get it released.&lt;/p&gt;
&lt;h3 id="cake"&gt;Cake&lt;/h3&gt;
&lt;p&gt;Cake continued to go from strength to strength in 2018.  With 11 releases, which included the release of a &lt;a href="https://www.nuget.org/packages/Cake.Tool/"&gt;.Net Global Tool version of Cake&lt;/a&gt;, there was plenty of things to be excited about.  Since releasing this in August, it has been downloaded over 100000 times.  There are now also official &lt;a href="https://hub.docker.com/r/cakebuild/cake"&gt;Docker images available for Cake&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The Cake-Contrib Organisation continued to grow as well, now with:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;50 People now a member of the Organisation on GitHub&lt;/li&gt;
&lt;li&gt;129 Repositories now in the Organisation&lt;/li&gt;
&lt;li&gt;238 Packages associated with the cake-contrib user on NuGet.org&lt;/li&gt;
&lt;li&gt;6,994,682 downloads of addins and modules associated with the cake-contrib user&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="nuget-profile"&gt;NuGet Profile&lt;/h3&gt;
&lt;p&gt;I have a growing number of NuGet packages, and associated total download count:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://gep13wpstorage.blob.core.windows.net/gep13/2019/01/01/NuGet-Profile.png" class="img-fluid" alt="NuGet Profile" /&gt;&lt;/p&gt;
&lt;h3 id="chocolatey-profile"&gt;Chocolatey Profile&lt;/h3&gt;
&lt;p&gt;The number of downloads of Chocolatey packages that I help maintain has continued to grow this year:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://gep13wpstorage.blob.core.windows.net/gep13/2019/01/01/Chocolatey-Profile.png" class="img-fluid" alt="Chocolatey Profile" /&gt;&lt;/p&gt;
&lt;h2 id="github-contributions"&gt;GitHub Contributions&lt;/h2&gt;
&lt;p&gt;Compared to last year, my GitHub Contributions are less this year (2423 compared to 3513)&lt;/p&gt;
&lt;p&gt;&lt;img src="https://gep13wpstorage.blob.core.windows.net/gep13/2019/01/01/GitHub-Contributions-2018.png" class="img-fluid" alt="GitHub Contributions 2018" /&gt;&lt;/p&gt;
&lt;p&gt;However, in part, this was a conscious decision on my part.  In hindsight, I sort of got carried away last year, trying to obtain a perfect streak of GitHub Contributions.  This year, this was far from a goal, and instead, I opted to close the laptop and concentrate on other things.  I still like to think I made a difference with the contributions that were made.  More on this in other sections of this blog post.&lt;/p&gt;
&lt;h2 id="hacktoberfest"&gt;Hacktoberfest&lt;/h2&gt;
&lt;p&gt;Continuing the yearly tradition, I took part in Hacktoberfest, and was able to complete the event, which resulted in me obtaining some very cool swag:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://gep13wpstorage.blob.core.windows.net/gep13/2019/01/01/Hacktoberfest-Swag.png" class="img-fluid" alt="Hacktoberfest Swag" /&gt;&lt;/p&gt;
&lt;p&gt;In addition this year, Microsoft got in on the act, and provided an &lt;a href="https://twitter.com/ashleymcnamara"&gt;Ashley McNamara&lt;/a&gt; original t-shirt for a contribution in to a Microsoft GitHb Repository:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://gep13wpstorage.blob.core.windows.net/gep13/2019/01/01/Hacktoberfest-Microsoft-Swag.png" class="img-fluid" alt="Hacktoberfest Microsoft Swag" /&gt;&lt;/p&gt;
&lt;p&gt;This year, I witnessed first hand the darker side of Hacktoberfest.  This is where people contribute spam pull Requests to Open Source projects in order to obtain the free swag.  This puts an unnecessary burden on Open Source Maintainers, and it is a sad side effect of the event.  In an email from DigitalOcean after the event they stated that they are going to try to address this ahead of the next event, and I hope that they are able to do this.&lt;/p&gt;
&lt;p&gt;As part of our local User Group, we ran a &lt;a href="https://www.meetup.com/Aberdeen-Developers-NET-User-Group/events/254881639/"&gt;Hacktoberfest event&lt;/a&gt; to introduce people to the event, and also to how to make contributions to Open Source Projects.&lt;/p&gt;
&lt;h2 id="pull-requests"&gt;24 Pull Requests&lt;/h2&gt;
&lt;p&gt;In addition to Hacktoberfest, I once again took part on the 24 Pull Requests event, and successfully completed it:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://gep13wpstorage.blob.core.windows.net/gep13/2019/01/01/24PullRequests-Complete.png" class="img-fluid" alt="24 Pull Requests Complete" /&gt;&lt;/p&gt;
&lt;p&gt;I also manned the Gitter Room for the event similar to last year to address any questions that came up.&lt;/p&gt;
&lt;p&gt;One slight difference in the event this year was that it wasn't just contributions in the form of pull requests that were accepted.  You were also able to manually contribute other contributions such as reviewing pull requests, asnwering Stack Overflow questions, speaking at User Group events, etc.  All of this was in order to try to make 24 Pull Requests more inclusive to everyone.  There is more detail on this in the &lt;a href="https://medium.com/&amp;#64;teabass/making-24-pull-requests-more-inclusive-for-2018-a64a1476335e"&gt;blog post&lt;/a&gt; about it.&lt;/p&gt;
&lt;h2 id="stack-overflow-contributions"&gt;Stack Overflow Contributions&lt;/h2&gt;
&lt;p&gt;Continuing on from last year, I continued to answer questions on Stack Overflow related to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Cake&lt;/li&gt;
&lt;li&gt;Chocolatey&lt;/li&gt;
&lt;li&gt;GitFlow&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As a result, my reputation increased to 7086 (an increase of 2289).  Somewhat surprisingly to me, this put me into the top 2% overall on Stack Overflow:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://gep13wpstorage.blob.core.windows.net/gep13/2019/01/01/Stack-Overflow-Reputation.png" class="img-fluid" alt="Stack Overflow Reputation" /&gt;&lt;/p&gt;
&lt;p&gt;I also saw an increase in the numbers of badges that I have been awarded:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://gep13wpstorage.blob.core.windows.net/gep13/2019/01/01/Stack-Overflow-Badges-Hat.png" class="img-fluid" alt="Stack Overflow Badges" /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1 Gold&lt;/li&gt;
&lt;li&gt;4 Silver&lt;/li&gt;
&lt;li&gt;4 Bronze&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And my impact increased to (an increase of 106k):&lt;/p&gt;
&lt;p&gt;&lt;img src="https://gep13wpstorage.blob.core.windows.net/gep13/2019/01/01/Stack-Overflow-Impact.png" class="img-fluid" alt="Stack Overflow Impact" /&gt;&lt;/p&gt;
&lt;h2 id="youtube-videos"&gt;YouTube Videos&lt;/h2&gt;
&lt;p&gt;I made a concerted effort in 2018 to make more YouTube videos, and this resulted in quite a few new playlists being created.  These centred mainly on releases for the various Open Source Projects that I work on, but also showcasing some specific features on those tools.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://gep13wpstorage.blob.core.windows.net/gep13/2019/01/01/YouTube-Channel.png" class="img-fluid" alt="YouTube Channel" /&gt;&lt;/p&gt;
&lt;p&gt;One major change in the most recent videos that I have created is that I have started appearing in the videos.  This was a big step for me, as I am not particurlay confident in this area, but I &amp;quot;think&amp;quot; they work.  In order to make this happen, I have purchased a green screen, and use the &lt;a href="https://obsproject.com/"&gt;OBS&lt;/a&gt; software to apply a chroma filter to the camera input so that I can &amp;quot;float&amp;quot; above the desktop.&lt;/p&gt;
&lt;h2 id="twitch"&gt;Twitch&lt;/h2&gt;
&lt;p&gt;If I thougth that putting myself into my YouTube videos was a big step, you can only imagine how scary it was to start doing live streams on Twitch, but I did it:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://gep13wpstorage.blob.core.windows.net/gep13/2019/01/01/Twitch-Profile.jpeg" class="img-fluid" alt="Twitch Profile" /&gt;&lt;/p&gt;
&lt;p&gt;So far, I have done two live streams, focusing on Chocolatey, and I have plans for continuing more in 2019, as well as focusing on other technologies such as Cake.  If you are interested in following along, you can join my stream &lt;a href="https://www.twitch.tv/gep13"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="aberdeen-developers"&gt;Aberdeen Developers&lt;/h2&gt;
&lt;p&gt;Aberdeen Developers continued to host events in 2018 (mainly thanks to the work of &lt;a href="https://twitter.com/nyami"&gt;Douglas Cameron&lt;/a&gt;) but I helped out where I could.  This year, we hosted events on Azure Functions and Cosmos DB, Blockchain, and Artificial Intelligence.  In addition, we started what is being referred to as &lt;code&gt;.NET and Natter&lt;/code&gt; events, which are much more informal events without a speaker, but more of a chance for people to get to together to talk about things that interest them.&lt;/p&gt;
&lt;p&gt;In December, we ran a &lt;a href="https://www.gofundme.com/aberdeen-developers-net-user-group"&gt;gofundme&lt;/a&gt; campaign with the aim to raise money for purchasing equipment to allow us to record, and potentially stream, our meetups.  I am very happy to say that we succeeded in meeting our funding target, and the equipment has now been purchased.  Now we simply need to figure out how to make it all work!&lt;/p&gt;
&lt;p&gt;Thanks to the .NET Foundation, we were able to start using &lt;a href="https://www.meetup.com/Aberdeen-Developers-NET-User-Group/"&gt;meetup.com&lt;/a&gt; for hosting/advertising the events that we run.  This has turned out to be very successful.&lt;/p&gt;
&lt;h2 id="office-hours"&gt;Office Hours&lt;/h2&gt;
&lt;p&gt;In 2018, I kept my &lt;a href="https://officehours.io/people/gep13"&gt;officehours.io&lt;/a&gt; profile open, and as a result, I had 3 very interesting conversations with people on various topics:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://gep13wpstorage.blob.core.windows.net/gep13/2019/01/01/Office-Hours.png" class="img-fluid" alt="Office Hours" /&gt;&lt;/p&gt;
&lt;p&gt;The format of officehours.io takes a little bit of getting used to, but once you &amp;quot;grok&amp;quot; it, I think it is a very useful medium.&lt;/p&gt;
&lt;p&gt;If you are interested in talking to me, feel free to reach out.&lt;/p&gt;
&lt;h2 id="thats-a-wrap"&gt;That's a wrap&lt;/h2&gt;
&lt;p&gt;And that, as they say, is that!  Once again, this year has FLOWN by, but it has been a very enjoyable year, and I am looking forward to more in 2019!  I hope 2018 was good to everyone!&lt;/p&gt;
</content>
		<summary>&lt;p&gt;When I was growing up, I always thought it was a cliché to hear people say that &lt;code&gt;the year has passed SO quickly&lt;/code&gt;, but this year, I got to witness this first hand.  2018 passed VERY quickly!&lt;/p&gt;</summary>
	</entry>
	<entry>
		<link href="http://www.gep13.co.uk/blog/gitreleasemanager-release-0.8.0" />
		<id>http://www.gep13.co.uk/blog/gitreleasemanager-release-0.8.0</id>
		<title>GitReleaseManager Release 0.8.0</title>
		<updated>2018-12-30T00:00:00Z</updated>
		<content>&lt;p&gt;I am very happy to announce the 0.8.0 Release of the &lt;a href="https://github.com/GitTools/GitReleaseManager"&gt;GitReleaseManager&lt;/a&gt;.  This is an important release as it brings with it a .Net Global Tool version of the tool.  Now, you can install it using:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-shell"&gt;dotnet tool install GitReleaseManager.Tool -g
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id="installation"&gt;Installation&lt;/h1&gt;
&lt;p&gt;You can now install GitReleaseManager on Windows as follows:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://gep13wpstorage.blob.core.windows.net/gep13/2018/12/30/GitReleaseManager-Windows-Install.png" class="img-fluid" alt="GitReleaseManager Windows Install" /&gt;&lt;/p&gt;
&lt;p&gt;And also on Mac as the following:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://gep13wpstorage.blob.core.windows.net/gep13/2018/12/30/GitReleaseManager-Mac-Install.png" class="img-fluid" alt="GitReleaseManager Mac Install" /&gt;&lt;/p&gt;
&lt;p&gt;In addition, it is still possible to install GitReleaseManager using Chocolatey with the command:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-shell"&gt;choco install gitreleasemanager.portable
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id="update-labels"&gt;Update Labels&lt;/h1&gt;
&lt;p&gt;In addition to the .Net Global Tool, another feature was added to GitReleaseManager.  It is now possible to update a GitHub Repository with a pre-defined set of labels.  In this release, that pre-defined list is hard-coded into GitReleaseManager, however, in a future release, it will be possible to provide a file with the labels to use.&lt;/p&gt;
&lt;h2 id="why-is-this-needed"&gt;Why is this needed?&lt;/h2&gt;
&lt;p&gt;While a new GitHub repository comes with a set of existing labels:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://gep13wpstorage.blob.core.windows.net/gep13/2018/12/30/GitHub-Default-Labels.png" class="img-fluid" alt="GitHub Default Labels" /&gt;&lt;/p&gt;
&lt;p&gt;These are not quite to my liking, and everytime I created a new Repository, I found I had to change them.  This ultimately resulted in a script which I would run to change them.  I then decided that this would make a sensible addition to GitReleaseManager.  As a result, you can now run the following command:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-shell"&gt;gitreleasemanager.exe label -o cake-contrib -r Cake.Twitter -u bob -p password
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To update the set of labels on the repository to the following:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://gep13wpstorage.blob.core.windows.net/gep13/2018/12/30/GitReleaseManager-Labels.png" class="img-fluid" alt="GitReleaseManager Labels" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; This is a destructive operation, in the sense that it will delete all the existing labels on your repository.&lt;/p&gt;
&lt;h1 id="thanks"&gt;Thanks&lt;/h1&gt;
&lt;p&gt;I have to say a huge thank you to Artur (&lt;a href="https://github.com/arturcic"&gt;&amp;#64;arturcic&lt;/a&gt;) who worked on this release, and who was responsible for the creation of the .Net Global Tool.  Thank you!&lt;/p&gt;
&lt;h1 id="release-information"&gt;Release Information&lt;/h1&gt;
&lt;p&gt;Release notes for all GitReleaseManager releases can be found on the &lt;a href="https://github.com/GitTools/GitReleaseManager/releases"&gt;GitHub Repository Release Page&lt;/a&gt; but the specific additions for the 0.8.0 release are shown below:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bugs&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/GitTools/GitReleaseManager/issues/120"&gt;&lt;strong&gt;#120&lt;/strong&gt;&lt;/a&gt; URL parts incorrectly identifies the user and repository parts&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/GitTools/GitReleaseManager/issues/119"&gt;&lt;strong&gt;#119&lt;/strong&gt;&lt;/a&gt; Correct issue with casing of label name&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Features&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/GitTools/GitReleaseManager/issues/124"&gt;&lt;strong&gt;#124&lt;/strong&gt;&lt;/a&gt; Add support for adding default labels to issues on a repository&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/GitTools/GitReleaseManager/issues/117"&gt;&lt;strong&gt;#117&lt;/strong&gt;&lt;/a&gt; Add Token option for CLI as alternative to user/password&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/GitTools/GitReleaseManager/issues/116"&gt;&lt;strong&gt;#116&lt;/strong&gt;&lt;/a&gt; Add GitReleaseManager as Global Tool&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Improvements&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/GitTools/GitReleaseManager/issues/121"&gt;&lt;strong&gt;#121&lt;/strong&gt;&lt;/a&gt; Include link to closed issues in milestone link&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/GitTools/GitReleaseManager/issues/115"&gt;&lt;strong&gt;#115&lt;/strong&gt;&lt;/a&gt; Switch to new csproj format&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/GitTools/GitReleaseManager/issues/110"&gt;&lt;strong&gt;#110&lt;/strong&gt;&lt;/a&gt; Update project NuGet packages&lt;/li&gt;
&lt;/ul&gt;
</content>
		<summary>&lt;p&gt;I am very happy to announce the 0.8.0 Release of the &lt;a href="https://github.com/GitTools/GitReleaseManager"&gt;GitReleaseManager&lt;/a&gt;.  This is an important release as it brings with it a .Net Global Tool version of the tool.  Now, you can install it using:&lt;/p&gt;</summary>
	</entry>
	<entry>
		<link href="http://www.gep13.co.uk/blog/introducing-cake-recipe-vscode-extension" />
		<id>http://www.gep13.co.uk/blog/introducing-cake-recipe-vscode-extension</id>
		<title>Introducing the Cake.Recipe VS Code Extension</title>
		<updated>2018-12-29T00:00:00Z</updated>
		<content>&lt;p&gt;This is an announcement blog post for the &lt;a href="https://marketplace.visualstudio.com/items?itemName=gep13.cakerecipe-vscode"&gt;Cake.Recipe VS Code Extension&lt;/a&gt; that I created recently.&lt;/p&gt;
&lt;h1 id="what-is-it"&gt;What is it?&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://github.com/cake-contrib/Cake.Recipe"&gt;Cake.Recipe&lt;/a&gt; is a very opinionated set of &lt;a href="https://cakebuild.net/"&gt;Cake&lt;/a&gt; scripts that are intended to be used across multiple projects.  Making use of a set of conventions, and project specific information, it is possible to run common build tasks over and over again, without the need to re-define them each time, for each project.  These scripts are housed within a NuGet package, that is restored into the local tools folder when Cake executes.&lt;/p&gt;
&lt;p&gt;In order to make this happen, it is necessary to create a small entry script (I refer to it as the recipe.cake file), which defines the project specific information.  In the past, I have simply copied this file from a previous project, and changed it as necessary.  This new VS Code extension creates this file on the fly, after you have provided some information.&lt;/p&gt;
&lt;h1 id="installation"&gt;Installation&lt;/h1&gt;
&lt;p&gt;Installing the &lt;a href="https://marketplace.visualstudio.com/items?itemName=gep13.cakerecipe-vscode"&gt;Cake.Recipe Extension for VS Code&lt;/a&gt; is simple, it installs in the same way as any other extension.  Open Extensions from the left hand side section of VS Code, or select View | Extensions.  Then do a search for &amp;quot;Cake.Recipe&amp;quot; and the extension with an author of &amp;quot;Gary Ewan Park&amp;quot; should be returned.  Go ahead and install the extension:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://gep13wpstorage.blob.core.windows.net/gep13/2018/12/29/CakeRecipe-Extension-Install.png" class="img-fluid" alt="Cake.Recipe Extension Install" /&gt;&lt;/p&gt;
&lt;p&gt;When prompted, click the Reload button.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://gep13wpstorage.blob.core.windows.net/gep13/2018/12/29/CakeRecipe-Extension-Reload.png" class="img-fluid" alt="Cake.Recipe Extension Reload" /&gt;&lt;/p&gt;
&lt;h1 id="usage"&gt;Usage&lt;/h1&gt;
&lt;h2 id="commands"&gt;Commands&lt;/h2&gt;
&lt;p&gt;In this initial release, there is only 1 command available:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://gep13wpstorage.blob.core.windows.net/gep13/2018/12/29/CakeRecipe-Extension-Commands.png" class="img-fluid" alt="Cake.Recipe Extension Commands" /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Cake.Recipe: Add default recipe.cake file&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Executing this command will prompt you for some information.  Firstly, the name that you want to give to the script (which defaults to &lt;code&gt;recipe.cake&lt;/code&gt;, but which can be anything):&lt;/p&gt;
&lt;p&gt;&lt;img src="https://gep13wpstorage.blob.core.windows.net/gep13/2018/12/29/CakeRecipe-Command-Build-Script.png" class="img-fluid" alt="Cake.Recipe Command Build Script" /&gt;&lt;/p&gt;
&lt;p&gt;Then you will be asked for the name of the folder that contains the Source Code that is to be built with Cake.Recipe.  This is one of the conventions that Cake.Recipe is based off of.  This defaults to a folder called &lt;code&gt;Source&lt;/code&gt; but again, it can be anything that you like:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://gep13wpstorage.blob.core.windows.net/gep13/2018/12/29/CakeRecipe-Command-Source-Folder.png" class="img-fluid" alt="Cake.Recipe Command Source Folder" /&gt;&lt;/p&gt;
&lt;p&gt;The third piece of information is the name of the GitHub Owner/Organisation that houses the repository that your project lives in.  Again, this is a convention, but it is assumed that you are using source control, and at the minute, Cake.Recipe has really only be tested against GitHub.  That is not to say that it wouldn't work, if you housed the code elsewhere, I just can't say that it will:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://gep13wpstorage.blob.core.windows.net/gep13/2018/12/29/CakeRecipe-Command-GitHub-Owner.png" class="img-fluid" alt="Cake.Recipe Command GitHub Owner" /&gt;&lt;/p&gt;
&lt;p&gt;The final piece of information is the name of the repository where the code is hosted on GitHub:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://gep13wpstorage.blob.core.windows.net/gep13/2018/12/29/CakeRecipe-Command-GitHub-Repository.png" class="img-fluid" alt="Cake.Recipe Command GitHub Repository" /&gt;&lt;/p&gt;
&lt;p&gt;With all of these pieces of information, the recipe.cake file is generated (here, I used a value of &lt;code&gt;cake-contrib&lt;/code&gt; and &lt;code&gt;Cake.Twitter&lt;/code&gt; and the GitHub information):&lt;/p&gt;
&lt;p&gt;&lt;img src="https://gep13wpstorage.blob.core.windows.net/gep13/2018/12/29/CakeRecipe-Command-Generated-File.png" class="img-fluid" alt="Cake.Recipe Command Generated File" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; The generated file, like Cake.Recipe itself, it quite opinionated, and it is how I normally build a project using Cake.Recipe.  There are likely things that you will need to change depending on how you need to execute the build, but this is intended as a place to start.&lt;/p&gt;
&lt;h1 id="documentation"&gt;Documentation&lt;/h1&gt;
&lt;p&gt;You can find additional documentation for this extension here:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://gep13.github.io/cakerecipe-vscode/"&gt;https://gep13.github.io/cakerecipe-vscode/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;:  At the time of writing this blog post, there is little to no documentation, but the scaffolding is there to get some added, so if you are interested, please feel free to jump in and help.&lt;/p&gt;
&lt;h1 id="resources"&gt;Resources&lt;/h1&gt;
&lt;p&gt;If you are interested in hearing about new functions that are being added into the Extension, there is a YouTube &lt;a href="https://www.youtube.com/playlist?list=PL84yg23i9GBgVQXtp9G2BEkcR6v-nCsoH"&gt;playlist&lt;/a&gt;, where I will push short videos of the new functionality as each version is released.&lt;/p&gt;
&lt;p&gt;The introductory video for this first release is here:&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/f7Ogy05im4M" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;
&lt;h1 id="source-code"&gt;Source Code&lt;/h1&gt;
&lt;p&gt;The source code for the Cake.Recipe VS Code Extension can be found here:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/gep13/cakerecipe-vscode"&gt;https://github.com/gep13/cakerecipe-vscode&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="chat-room"&gt;Chat Room&lt;/h1&gt;
&lt;p&gt;If you have any questions about this Extension (or any of the other OSS work that I do), then please feel to drop into the Gitter Chat room:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://gitter.im/gep13-oss/community?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge"&gt;&lt;img src="https://badges.gitter.im/gep13-oss/community.svg" class="img-fluid" alt="Join the chat at https://gitter.im/gep13-oss/community" /&gt;&lt;/a&gt;&lt;/p&gt;
</content>
		<summary>&lt;p&gt;This is an announcement blog post for the &lt;a href="https://marketplace.visualstudio.com/items?itemName=gep13.cakerecipe-vscode"&gt;Cake.Recipe VS Code Extension&lt;/a&gt; that I created recently.&lt;/p&gt;</summary>
	</entry>
	<entry>
		<link href="http://www.gep13.co.uk/blog/introducing-ci-cd-assets-repository-and-vscode-extension" />
		<id>http://www.gep13.co.uk/blog/introducing-ci-cd-assets-repository-and-vscode-extension</id>
		<title>Introducing the CI/CD Assets Repository and VS Code Extension</title>
		<updated>2018-12-28T00:00:00Z</updated>
		<content>&lt;p&gt;This is an announcement blog post for the &lt;a href="https://github.com/gep13/CI-CD-assets"&gt;repository&lt;/a&gt; and &lt;a href="https://marketplace.visualstudio.com/items?itemName=gep13.ci-cd-assets-vscode"&gt;VS Code Extension&lt;/a&gt; that I created yesterday.&lt;/p&gt;
&lt;h1 id="what-is-it"&gt;What is it?&lt;/h1&gt;
&lt;p&gt;Every time I setup a new repository, I have to try to remember what steps I took to get everything up and running last time I created a project.  This includes setting up Continuous Integration, Documentation, Releases, etc.  All the things that we don't want to think about when we are actually writing code, and excited about getting something shipped.  Normally, what I do is look at the last project that I created, and copy pretty much everything from there.  This is &amp;quot;ok&amp;quot;, but not ideal.  After giving it some thought, I decided to create a &lt;a href="https://github.com/gep13/CI-CD-assets"&gt;repository&lt;/a&gt;, which will house all the assets that I typically include in a new project.  That way, as things change over time, I can keep them updated in one place, ready for starting a new project.  With that done, I decided that I needed an &amp;quot;easy&amp;quot; way to get these into my new project.  I have seen people use things like yeoman to do this sort of thing, but I wanted something that wasn't quite as involved, and simply let's me grab the things that I need (as these may change on a per project basis).  What I settled on was a &lt;a href="https://marketplace.visualstudio.com/items?itemName=gep13.ci-cd-assets-vscode"&gt;VS Code Extension&lt;/a&gt;, that can provide some commands that can download these assets into the current working directory.&lt;/p&gt;
&lt;h1 id="installation"&gt;Installation&lt;/h1&gt;
&lt;p&gt;Installing the &lt;a href="https://marketplace.visualstudio.com/items?itemName=gep13.ci-cd-assets-vscode"&gt;CI/CD Assets Extension for VS Code&lt;/a&gt; is simple, it installs in the same way as any other extension.  Open Extensions from the left hand side section of VS Code, or select View | Extensions.  Then do a search for &amp;quot;CI/CD&amp;quot; and the extension with an author of &amp;quot;Gary Ewan Park&amp;quot; should be returned.  Go ahead and install the extension:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://gep13wpstorage.blob.core.windows.net/gep13/2018/12/28/CI-CD-Assets-Extension-Install.png" class="img-fluid" alt="CI/CD Assets Extension Install" /&gt;&lt;/p&gt;
&lt;p&gt;When prompted, click the Reload button.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://gep13wpstorage.blob.core.windows.net/gep13/2018/12/28/CI-CD-Assets-Extension-Reload.png" class="img-fluid" alt="CI/CD Assets Extension Reload" /&gt;&lt;/p&gt;
&lt;h1 id="usage"&gt;Usage&lt;/h1&gt;
&lt;h2 id="commands"&gt;Commands&lt;/h2&gt;
&lt;p&gt;In this initial release, there are 10 commands available:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://gep13wpstorage.blob.core.windows.net/gep13/2018/12/28/CI-CD-Assets-Extension-Commands.png" class="img-fluid" alt="CI/CD Assets Extension Commands" /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CICD: Download .editorconfig file&lt;/li&gt;
&lt;li&gt;CICD: Download .appveyor.yml file&lt;/li&gt;
&lt;li&gt;CICD: Download .gitattributes file&lt;/li&gt;
&lt;li&gt;CICD: Download .gitignore file&lt;/li&gt;
&lt;li&gt;CICD: Download .mergify.yml file&lt;/li&gt;
&lt;li&gt;CICD: Download .travis.yml file&lt;/li&gt;
&lt;li&gt;CICD: Download GitReleaseManager.yaml file&lt;/li&gt;
&lt;li&gt;CICD: Download config.wyam file&lt;/li&gt;
&lt;li&gt;CICD: Download .github files&lt;/li&gt;
&lt;li&gt;CICD: Download all files&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Each one of these commands (with the exception of the final two), download a single file on the root of the current workspace.  For example, executing the &lt;code&gt;CICD: Download .appveyor.yml file&lt;/code&gt; command results in the file at this &lt;a href="https://github.com/gep13/CI-CD-assets/blob/master/.appveyor.yml"&gt;URL&lt;/a&gt; being downloaded into the current workspace.  If a file with that name already exists in the current workspace, you will be prompted whether it should be overwritten or not:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://gep13wpstorage.blob.core.windows.net/gep13/2018/12/28/CI-CD-Assets-Extension-Overwrite.png" class="img-fluid" alt="CI/CD Assets Extension Overwrite" /&gt;&lt;/p&gt;
&lt;p&gt;At this point, you can choose to cancel the operation by clicking the small cross at the top of the pop-up, or you can continue the operation by clicking the Overwrite button.  If you choose to proceed, you should see the following when completed:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://gep13wpstorage.blob.core.windows.net/gep13/2018/12/28/CI-CD-Assets-Extension-Download-Complete.png" class="img-fluid" alt="CI/CD Assets Extension Download Complete" /&gt;&lt;/p&gt;
&lt;p&gt;The final two commands are slightly different.  &lt;code&gt;CICD: Download .github files&lt;/code&gt; will download all the files in the .github folder &lt;a href="https://github.com/gep13/CI-CD-assets/tree/master/.github"&gt;here&lt;/a&gt; and also create the .github folder if it doesn't exist, and the final command downloads all the files from the repository.  This latter command is useful if you want to grab everything and get started.&lt;/p&gt;
&lt;h1 id="settings"&gt;Settings&lt;/h1&gt;
&lt;p&gt;Now, the files that I have placed into the CI/CD Assets are very much configured to the way that I operate, and they are unlikely to fit exactly what &amp;quot;you&amp;quot; want.  I will happily accept PR's to the files if they fit with how I want to operate, but more likely, you are going to want to use your own files.  This is possible via the settings for this VS Code Extension.  By default, each of the commands use the URL's which are pointed at the CI/CD Assets Repository:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://gep13wpstorage.blob.core.windows.net/gep13/2018/12/28/CI-CD-Assets-Extension-Settings.png" class="img-fluid" alt="CI/CD Assets Extension Settings" /&gt;&lt;/p&gt;
&lt;p&gt;However, you can override these download URL's with your own, and continue to use the Commands that are included within this extension.&lt;/p&gt;
&lt;h1 id="documentation"&gt;Documentation&lt;/h1&gt;
&lt;p&gt;You can find additional documentation for this extension here:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://gep13.github.io/CI-CD-assets-vscode/"&gt;https://gep13.github.io/CI-CD-assets-vscode/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;:  At the time of writing this blog post, there is little to no documentation, but the scaffolding is there to get some added, so if you are interested, please feel free to jump in and help.&lt;/p&gt;
&lt;h1 id="resources"&gt;Resources&lt;/h1&gt;
&lt;p&gt;If you are interested in hearing about new functions that are being added into the Extension, there is a YouTube &lt;a href="https://www.youtube.com/playlist?list=PL84yg23i9GBjZXVmLgZfNcc9Nhz4aGdto"&gt;playlist&lt;/a&gt;, where I will push short videos of the new functionality as each version is released.&lt;/p&gt;
&lt;p&gt;The introductory video for this first release is here:&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/libl83OBs6o" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;
&lt;h1 id="source-code"&gt;Source Code&lt;/h1&gt;
&lt;p&gt;The source code for CI/CD Assets can be found here:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/gep13/CI-CD-assets"&gt;https://github.com/gep13/CI-CD-assets&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This houses all the assets that are intended to be consumed when starting a new project.  The source code for the CI/CD Assets VS Code Extension can be found here:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/gep13/CI-CD-assets-vscode"&gt;https://github.com/gep13/CI-CD-assets-vscode&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="chat-room"&gt;Chat Room&lt;/h1&gt;
&lt;p&gt;If you have any questions about this Extension (or any of the other OSS work that I do), then please feel to drop into the Gitter Chat room:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://gitter.im/gep13-oss/community?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge"&gt;&lt;img src="https://badges.gitter.im/gep13-oss/community.svg" class="img-fluid" alt="Join the chat at https://gitter.im/gep13-oss/community" /&gt;&lt;/a&gt;&lt;/p&gt;
</content>
		<summary>&lt;p&gt;This is an announcement blog post for the &lt;a href="https://github.com/gep13/CI-CD-assets"&gt;repository&lt;/a&gt; and &lt;a href="https://marketplace.visualstudio.com/items?itemName=gep13.ci-cd-assets-vscode"&gt;VS Code Extension&lt;/a&gt; that I created yesterday.&lt;/p&gt;</summary>
	</entry>
	<entry>
		<link href="http://www.gep13.co.uk/blog/using-cake-github-action" />
		<id>http://www.gep13.co.uk/blog/using-cake-github-action</id>
		<title>Using Cake GitHub Action</title>
		<updated>2018-12-15T00:00:00Z</updated>
		<content>&lt;p&gt;In &lt;a href="https://www.gep13.co.uk/blog/getting-started-with-github-actions"&gt;yesterdays blog post&lt;/a&gt; I described how I had been able to create a custom GitHub Action to execute a target from a  &lt;a href="https://cakebuild.net/"&gt;Cake&lt;/a&gt; script.  To follow up on that, I thought it would be good to show how you can actually make use of this custom action, to achieve something useful in terms of a GitHub Action.&lt;/p&gt;
&lt;h2 id="what-are-we-going-to-do"&gt;What are we going to do?&lt;/h2&gt;
&lt;p&gt;Almost exclusively on the Open Source projects that I work on, I use GitHub Milestones to collect the Issues/Pull Requests that are going to be included in any given release.  Once everything is ready, I release the &amp;quot;bits&amp;quot; of the project, and then I close the Milestone.  Wouldn't it be good if the act of closing a Milestone were to trigger a notification to Twitter, to let people know that the release is ready.  I think so...&lt;/p&gt;
&lt;h2 id="milestone-event"&gt;Milestone event&lt;/h2&gt;
&lt;p&gt;Of the &lt;a href="https://developer.github.com/actions/creating-workflows/workflow-configuration-options/#events-supported-in-workflow-files"&gt;28 events&lt;/a&gt; that can trigger the workflow of a GitHub Action, one of them is the &lt;a href="https://developer.github.com/v3/activity/events/types/#milestoneevent"&gt;milestone event&lt;/a&gt;, which will trigger:&lt;/p&gt;
&lt;blockquote class="blockquote"&gt;
&lt;p&gt;Any time a milestone is created, closed, opened, edited, or deleted.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Now, we only want the Tweet to be sent out when a milestone is closed, but based on the documentation, we should be able to inspect the event payload (which is a JSON file), to see more details about the event, specifically, the &lt;code&gt;action&lt;/code&gt; property, which will either be:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;created&lt;/li&gt;
&lt;li&gt;closed&lt;/li&gt;
&lt;li&gt;opened&lt;/li&gt;
&lt;li&gt;edited&lt;/li&gt;
&lt;li&gt;deleted&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="parsing-the-json-file"&gt;Parsing the JSON file&lt;/h2&gt;
&lt;p&gt;When it comes to parsing JSON files in .NET, the obvious choice is to use &lt;a href="https://www.nuget.org/packages/Newtonsoft.Json/"&gt;Newtonsoft.Json&lt;/a&gt;.  And in terms of Cake, a community member, &lt;a href="https://github.com/redth"&gt;redth&lt;/a&gt; has already done the work of creating a Cake Addin (&lt;a href="https://www.nuget.org/packages/Cake.Json/"&gt;Cake.Json&lt;/a&gt;) to make this incredibly simple.  Parsing a JSON file is as simple as:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;var json = ParseJsonFromFile(&amp;quot;&amp;lt;path to JSON file&amp;gt;&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="sending-a-tweet"&gt;Sending a Tweet&lt;/h2&gt;
&lt;p&gt;In the same way that parsing a JSON file in Cake is a one-liner, the same is true of sending a Tweet.  Using the &lt;a href="https://www.nuget.org/packages/Cake.Twitter/"&gt;Cake.Twitter&lt;/a&gt; addin, sending a tweet is as simple as:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;TwitterSendTweet(&amp;quot;oAuthConsumerKey&amp;quot;, &amp;quot;oAuthConsumerSecret&amp;quot;, &amp;quot;accessToken&amp;quot;, &amp;quot;accessTokenSecret&amp;quot;, &amp;quot;The text for the Tweet you want to send&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="alert alert-info"&gt;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In order to get the above keys and tokens, you will need to create a developer account on Twitter.&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id="event-data"&gt;Event data&lt;/h2&gt;
&lt;p&gt;Based on the &lt;a href="https://developer.github.com/actions/creating-github-actions/accessing-the-runtime-environment/#environment-variables"&gt;documentation&lt;/a&gt; GitHub Actions provides an environment variable which contains the path to a file, which has all the JSON payload of the event which triggered the workflow.  By inspecting this environment variable, and reading the contents of the file, we can figure out whether the event was a milestone being closed.&lt;/p&gt;
&lt;h2 id="putting-it-all-together"&gt;Putting it all together...&lt;/h2&gt;
&lt;p&gt;In the previous blog post, we left the workflow of our action triggering off a &lt;code&gt;push&lt;/code&gt; event, with a single environment variable and argument.  It was defined as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-shell"&gt;workflow &amp;quot;New workflow&amp;quot; {
  on = &amp;quot;push&amp;quot;
  resolves = [&amp;quot;cake test&amp;quot;]
}


action &amp;quot;cake test&amp;quot; {
    uses = &amp;quot;gep13/cake-actions/task&amp;#64;master&amp;quot;

    env = {
        CAKE_SCRIPT = &amp;quot;./build.cake&amp;quot;
    }

    args =[&amp;quot;Default&amp;quot;]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To make our workflow trigger on a milestone event, we will need to change the &lt;code&gt;on&lt;/code&gt; parameter, and we will also need to add some &lt;a href="https://developer.github.com/actions/creating-workflows/storing-secrets/"&gt;secrets&lt;/a&gt; to the definition, which will store the Twitter Keys and Tokens, so that we can actually send the Tweet.  After updating, the workflow then looks like the following:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-shell"&gt;workflow &amp;quot;New workflow&amp;quot; {
  resolves = [&amp;quot;cake test&amp;quot;]
  on = &amp;quot;milestone&amp;quot;
}

action &amp;quot;cake test&amp;quot; {
  uses = &amp;quot;gep13/cake-actions/task&amp;#64;master&amp;quot;
  env = {
    CAKE_SCRIPT = &amp;quot;./build.cake&amp;quot;
  }
  args = [&amp;quot;Default&amp;quot;]
  secrets = [&amp;quot;TWITTER_CONSUMER_KEY&amp;quot;, &amp;quot;TWITTER_CONSUMER_SECRET&amp;quot;, &amp;quot;TWITTER_ACCESS_TOKEN&amp;quot;, &amp;quot;TWITTER_ACCESS_TOKEN_SECRET&amp;quot;]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Which &amp;quot;looks&amp;quot; like the following:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://gep13wpstorage.blob.core.windows.net/gep13/2018/12/15/workflow-with-secrets.png" class="img-fluid" alt="Workflow with secrets" /&gt;&lt;/p&gt;
&lt;h2 id="the-cake-script"&gt;The Cake Script&lt;/h2&gt;
&lt;p&gt;With the workflow defined, now we can turn our attention to the Cake Script itself.  This will need to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Add the Cake.Json and Cake.Twitter addins&lt;/li&gt;
&lt;li&gt;Grab the required environment variables&lt;/li&gt;
&lt;li&gt;Parse the event JSON file&lt;/li&gt;
&lt;li&gt;Inspect the action variable to see if the milestone is closed&lt;/li&gt;
&lt;li&gt;Send the tweet if required&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The end result (which likely needs some additional error checking, but which works for what is trying to be shown here) looks like the following:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;#addin &amp;quot;nuget:https://www.nuget.org/api/v2?package=Cake.Twitter&amp;amp;version=0.9.0&amp;quot;
#addin &amp;quot;nuget:https://www.nuget.org/api/v2?package=Cake.Json&amp;amp;version=3.0.1&amp;quot;

var target = Argument(&amp;quot;target&amp;quot;, &amp;quot;Default&amp;quot;);

Task(&amp;quot;Default&amp;quot;)
  .Does(() =&amp;gt;
{
  var oAuthConsumerKey        = EnvironmentVariable(&amp;quot;TWITTER_CONSUMER_KEY&amp;quot;);
  var oAuthConsumerSecret     = EnvironmentVariable(&amp;quot;TWITTER_CONSUMER_SECRET&amp;quot;);
  var accessToken             = EnvironmentVariable(&amp;quot;TWITTER_ACCESS_TOKEN&amp;quot;);
  var accessTokenSecret       = EnvironmentVariable(&amp;quot;TWITTER_ACCESS_TOKEN_SECRET&amp;quot;);
  var githubEventPath         = EnvironmentVariable(&amp;quot;GITHUB_EVENT_PATH&amp;quot;);

  if(string.IsNullOrEmpty(githubEventPath))
  {
    throw new Exception(&amp;quot;Unable to find GitHub Event Path&amp;quot;);
  }

  try
  {
    var json = ParseJsonFromFile(githubEventPath);

    Information(json);

    JToken value;
    if (json.TryGetValue(&amp;quot;action&amp;quot;, out value))
    {
      Information(value);

      if(value.ToString() == &amp;quot;closed&amp;quot;)
      {
        TwitterSendTweet(oAuthConsumerKey, oAuthConsumerSecret, accessToken, accessTokenSecret, &amp;quot;This tweet was sent as a result of a milestone being closed on a repository, thanks to &amp;#64;gitHub Actions.  Blog post to follow later...&amp;quot;);

        Information(&amp;quot;Tweet sent&amp;quot;);
      }
      else
      {
        Information(&amp;quot;No tweet sent, as milestone wasn't closed&amp;quot;);
      }
    }
  }
  catch(Exception ex)
  {
      Error(&amp;quot;{0}&amp;quot;, ex);
  }
});

RunTarget(target);
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="lets-run-it"&gt;Let's run it...&lt;/h2&gt;
&lt;p&gt;With all of the above checked into my test repository, I went ahead and created a new milestone.  Looking at the logs, I saw the following:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://gep13wpstorage.blob.core.windows.net/gep13/2018/12/15/milestone-created-event-payload.png" class="img-fluid" alt="Milestone created event payload" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://gep13wpstorage.blob.core.windows.net/gep13/2018/12/15/milestone-created-no-tweet.png" class="img-fluid" alt="Milestone created no tweet" /&gt;&lt;/p&gt;
&lt;p&gt;I then went ahead and closed the milestone.  Checking the logs, I then saw the following:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://gep13wpstorage.blob.core.windows.net/gep13/2018/12/15/milestone-closed-event-payload.png" class="img-fluid" alt="Milestone closed event payload" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://gep13wpstorage.blob.core.windows.net/gep13/2018/12/15/milestone-closed-tweet-sent.png" class="img-fluid" alt="Milestone closed tweet sent" /&gt;&lt;/p&gt;
&lt;p&gt;Too good to be true...&lt;/p&gt;
&lt;p&gt;Checking Twitter, I then saw the following:&lt;/p&gt;
&lt;blockquote class="twitter-tweet" data-lang="en"&gt;&lt;p lang="en" dir="ltr"&gt;This tweet was sent as a result of a milestone being closed on a repository, thanks to &lt;a href="https://twitter.com/github?ref_src=twsrc%5Etfw"&gt;&amp;#64;gitHub&lt;/a&gt; Actions.  Blog post to follow later...&lt;/p&gt;&amp;mdash; Gary Ewan Park (&amp;#64;gep13) &lt;a href="https://twitter.com/gep13/status/1073905256164077568?ref_src=twsrc%5Etfw"&gt;December 15, 2018&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;I honestly didn't think that this would &amp;quot;just&amp;quot; work the first time, but it did!  I am really starting to like this system, and the integration of Cake means that I have access to a huge library of addins for doing a huge number of things.&lt;/p&gt;
&lt;h2 id="doing-more-stuff"&gt;Doing more stuff&lt;/h2&gt;
&lt;p&gt;This is just one example of what you can do as the result of an event coming from your repository.  At last count, there are &lt;a href="https://github.com/cake-contrib/Home/blob/master/Audit_for_Cake_0.28.0.md"&gt;240 different addins for Cake&lt;/a&gt; that means that there are lots of &amp;quot;things&amp;quot; that you can do based on these events being triggered.  When it comes to sending out notifications, there are addins for sending messages:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;to Discord&lt;/li&gt;
&lt;li&gt;to Slack&lt;/li&gt;
&lt;li&gt;to Gitter&lt;/li&gt;
&lt;li&gt;via email&lt;/li&gt;
&lt;li&gt;via SendGrid&lt;/li&gt;
&lt;li&gt;the list goes on&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I would encourage you to take a look at the list of addins, and have a think about the actions that you can add to your repository.&lt;/p&gt;
&lt;h2 id="after-thoughts"&gt;After thoughts&lt;/h2&gt;
&lt;p&gt;After doing the above, I found the &lt;a href="https://github.com/actions/bin/tree/master/filter"&gt;following&lt;/a&gt; which I &amp;quot;think&amp;quot; I would be able to use to filter the milestone event to only trigger on closed events, but I haven't yet tested to see if this would be possible.  Part of me quite likes containing all the logic in the Cake script, but I guess there is a higher overhead to pay to use the Docker container for Cake if it isn't actually required.  Something to look into for future tests.&lt;/p&gt;
</content>
		<summary>&lt;p&gt;In &lt;a href="https://www.gep13.co.uk/blog/getting-started-with-github-actions"&gt;yesterdays blog post&lt;/a&gt; I described how I had been able to create a custom GitHub Action to execute a target from a  &lt;a href="https://cakebuild.net/"&gt;Cake&lt;/a&gt; script.  To follow up on that, I thought it would be good to show how you can actually make use of this custom action, to achieve something useful in terms of a GitHub Action.&lt;/p&gt;</summary>
	</entry>
	<entry>
		<link href="http://www.gep13.co.uk/blog/getting-started-with-github-actions" />
		<id>http://www.gep13.co.uk/blog/getting-started-with-github-actions</id>
		<title>Getting started with GitHub Actions</title>
		<updated>2018-12-14T00:00:00Z</updated>
		<content>&lt;p&gt;On Wednesday evening, I got a very pleasant email from GitHub, telling me that I had been given access to the GitHub Actions Beta.  This is something that I have been looking forward to for a while now, ever since I signed up for it.  I am a big user of Continuous Integration Systems for building the various Open Source projects that I work on, but I really like the idea of doing smaller, precise actions, as a result of other &amp;quot;things&amp;quot; happening on a repository.&lt;/p&gt;
&lt;p&gt;I was even more impatient to get started with the Beta when I saw &lt;a href="https://twitter.com/devblackops"&gt;Brandon Olin&lt;/a&gt; tweet this:&lt;/p&gt;
&lt;blockquote class="twitter-tweet" data-lang="en"&gt;&lt;p lang="en" dir="ltr"&gt;Getting my feet wet with GitHub Actions and having some fun with psake.&lt;br&gt;&lt;br&gt;Check out my generic psake task runner here: &lt;a href="https://t.co/lNvKwmDasE"&gt;https://t.co/lNvKwmDasE&lt;/a&gt;&lt;br&gt;&lt;br&gt;Still WIP but making progress. &lt;a href="https://t.co/8tPnxxWmtR"&gt;pic.twitter.com/8tPnxxWmtR&lt;/a&gt;&lt;/p&gt;&amp;mdash; Brandon Olin (&amp;#64;devblackops) &lt;a href="https://twitter.com/devblackops/status/1072036355855671297?ref_src=twsrc%5Etfw"&gt;December 10, 2018&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;As I wanted to do the same thing for &lt;a href="https://cakebuild.net/"&gt;Cake&lt;/a&gt;.&lt;/p&gt;
&lt;div class="alert alert-info"&gt;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I have to give a huge thanks to Brandon for the work that he did in creating the psake GitHub Action, as I was able to use this as the starting point for Cake GitHub Action.&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id="getting-started"&gt;Getting Started&lt;/h2&gt;
&lt;p&gt;There is some fairly comprehensive documentation on getting started with GitHub Actions on &lt;a href="https://developer.github.com/actions"&gt;the site&lt;/a&gt;, so I am not going to repeat that here, but rather focus on what was necessary to specifically get a Cake script executing as a result of a GitHub Action.&lt;/p&gt;
&lt;div class="alert alert-info"&gt;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In addition to the above documentation site, you can also find the source code for the out of the box actions on &lt;a href="https://github.com/actions"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id="docker-ftw"&gt;Docker FTW!&lt;/h2&gt;
&lt;p&gt;The starting point for any new GitHub Action is a Dockerfile.  This is what is going to be used to actually execute the action.  In the case of the psake GitHub Action, it uses &lt;a href="https://hub.docker.com/r/microsoft/powershell/"&gt;Microsoft's PowerShell Docker Image&lt;/a&gt; as it already has PowerShell installed, so all that is left is to install and execute psake.  In the case of Cake, there is already an image on the Docker Hub that has &lt;a href="https://hub.docker.com/r/cakebuild/cake"&gt;Cake&lt;/a&gt; installed, and ready to be used.  As a result the &lt;a href="https://github.com/gep13/cake-actions/blob/master/task/Dockerfile"&gt;Dockerfile&lt;/a&gt; for the Cake GitHub Action is relatively straight forward:&lt;/p&gt;
&lt;div class="alert alert-info"&gt;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The following is likely to change.  What is shown here is from the initial proof of concept action, just to see how things work&lt;/p&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class="language-shell"&gt;FROM cakebuild/cake:v0.30.0-2.1-sdk as base

FROM base as cake-build
LABEL &amp;quot;com.github.actions.name&amp;quot;         = &amp;quot;Cake task&amp;quot;
LABEL &amp;quot;com.github.actions.description&amp;quot;  = &amp;quot;Run Cake task&amp;quot;
LABEL &amp;quot;com.github.actions.icon&amp;quot;         = &amp;quot;box&amp;quot;
LABEL &amp;quot;com.github.actions.color&amp;quot;        = &amp;quot;yellow&amp;quot;

LABEL &amp;quot;repository&amp;quot; = &amp;quot;https://github.com/gep13/cake-actions&amp;quot;
LABEL &amp;quot;homepage&amp;quot;   = &amp;quot;https://github.com/cake-build/cake&amp;quot;
LABEL &amp;quot;maintainer&amp;quot; = &amp;quot;Gary Ewan Park &amp;lt;gep13&amp;#64;gep13.co.uk&amp;gt;&amp;quot;

ADD entrypoint.sh  /entrypoint.sh

RUN chmod +x /entrypoint.sh

ENTRYPOINT [&amp;quot;/entrypoint.sh&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;All that is really being done here is specifying the base image to use, and then configuring the information about the image, and then adding the entry point for when the container is executed.&lt;/p&gt;
&lt;h2 id="entry-point"&gt;Entry Point&lt;/h2&gt;
&lt;p&gt;With the Dockerfile defined, I then moved onto the entry point script for when the container is executed.  This ended up looking like the following:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-shell"&gt;#!/bin/sh

set -eu

cake --version

cake $CAKE_SCRIPT --target=$*

exit $?
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, this really needs some work in terms of error handling, etc, but again, just a proof of concept to show how things work.&lt;/p&gt;
&lt;p&gt;Since Cake is already available on the Docker image, it can be invoked directly.  So the first thing that is being done in this shell script is to run &lt;code&gt;cake --version&lt;/code&gt; so that information about what version of Cake is being used is output to the log.  After that, cake is being executed against a named script (which will be read from an Environment Variable &lt;code&gt;CAKE_SCRIPT&lt;/code&gt;), and then a specific target (which will come from an argument specified in the workflow).&lt;/p&gt;
&lt;p&gt;With both of those things created, the Cake GitHub Action is complete, and ready to be tested.  You can see the complete action &lt;a href="https://github.com/gep13/cake-actions/tree/master/task"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="creating-the-workflow"&gt;Creating the workflow&lt;/h2&gt;
&lt;p&gt;During the beta, GitHub Actions are only available on private repositories, so I can't link to the example repository that I am using, but I will walk you through what I did.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Open the GitHub repository, and click on the new Actions tab.&lt;/li&gt;
&lt;li&gt;Click the &lt;code&gt;Create a new workflow&lt;/code&gt; button.  This will create a file called &lt;code&gt;main.workflow&lt;/code&gt; in the &lt;code&gt;.github&lt;/code&gt; folder&lt;/li&gt;
&lt;li&gt;Since we will be using a custom GitHub Action, switch away from the visual editor by clicking on &lt;code&gt;Edit new file&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Enter the following&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class="language-shell"&gt;workflow &amp;quot;New workflow&amp;quot; {
  on = &amp;quot;push&amp;quot;
  resolves = [&amp;quot;cake test&amp;quot;]
}


action &amp;quot;cake test&amp;quot; {
    uses = &amp;quot;gep13/cake-actions/task&amp;#64;master&amp;quot;

    env = {
        CAKE_SCRIPT = &amp;quot;./build.cake&amp;quot;
    }

    args =[&amp;quot;Default&amp;quot;]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;This defines a new &lt;code&gt;cake test&lt;/code&gt; action, which is triggered when a push happens on the repository&lt;/li&gt;
&lt;li&gt;This action uses the custom action located at &lt;code&gt;gep13/cake-actions/task&amp;#64;master&lt;/code&gt; &lt;strong&gt;NOTE:&lt;/strong&gt; here master indicates that the contents of the current master branch should be used.  Once running properly, you are probably going to want to use a named tag, to pin to a specific version of the action, so that you know that is won't change over time.  For example, &lt;code&gt;gep13/cake-actions/task&amp;#64;0.1.0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Then a new environment variable is defined called &lt;code&gt;CAKE_SCRIPT&lt;/code&gt; with a value of &lt;code&gt;./build.cake&lt;/code&gt;.  This correlates to a file called build.cake which needs to be located in the root of the repository where the action is being used&lt;/li&gt;
&lt;li&gt;Finally, the arguments to pass into Cake are defined.  Here, we are setting this to Default.  When passed into Cake, this will be changed to &lt;code&gt;--target=Default&lt;/code&gt;  &lt;strong&gt;NOTE:&lt;/strong&gt; This part of the entrypoint.sh really needs some work, again, just a proof of concept&lt;/li&gt;
&lt;li&gt;Save and commit the changes to the main.workflow&lt;/li&gt;
&lt;li&gt;Now that these parts are in place, we need a build.cake file.  A simple one would be the following, which writes out Hello World! to the console output:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class="language-shell"&gt;var target = Argument(&amp;quot;target&amp;quot;, &amp;quot;Default&amp;quot;);

Task(&amp;quot;Default&amp;quot;)
  .Does(() =&amp;gt;
{
  Information(&amp;quot;Hello World!&amp;quot;);
});

RunTarget(target);
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Switch back to the Visual Editor, and you should see something that looks like the following:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="https://gep13wpstorage.blob.core.windows.net/gep13/2018/12/14/workflow-in-visual-editor.png" class="img-fluid" alt="Workflow in Visual Editor" /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Make another change to the repository, and push the changes.  This will then trigger the workflow, and as a result, execute the action&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="https://gep13wpstorage.blob.core.windows.net/gep13/2018/12/14/workflow-execution-start.png" class="img-fluid" alt="Workflow execution state" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://gep13wpstorage.blob.core.windows.net/gep13/2018/12/14/workflow-execution-end.png" class="img-fluid" alt="Workflow execution end" /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The action starts by downloading the Docker image that is required for it to execute the action, and then it executes the two Cake commands that are defined in the action.  i.e. &lt;code&gt;cake --version&lt;/code&gt; followed by &lt;code&gt;cake ./build.cake --target=Default&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;We can then see the &lt;code&gt;Hello World!&lt;/code&gt; being output within the Default task.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="chaining-actions"&gt;Chaining Actions&lt;/h2&gt;
&lt;p&gt;As shown in Brandon's image above, it would be possible to chain multiple cake actions together to form the entire workflow, with each one executing a particular task within the Cake script.  However, it is more likely that I would put this orchestration into the Cake script itself.  However, both options are definitely possible, so the choice is up to the end user.&lt;/p&gt;
&lt;h2 id="going-forward"&gt;Going forward&lt;/h2&gt;
&lt;p&gt;As mentioned, some work is required to move this from a proof of concept to a hardened, re-usable, GitHub Action.  This will happen in due course, and the &lt;code&gt;cake-actions&lt;/code&gt; repository will likely move under the cake-build Organisation on GitHub.&lt;/p&gt;
&lt;p&gt;I really like the idea of defining my &amp;quot;work&amp;quot; in a Cake script, and then being able to re-use them in various repositories, triggered off of a number of different triggers.  There are currently &lt;a href="https://developer.github.com/actions/creating-workflows/workflow-configuration-options/#events-supported-in-workflow-files"&gt;28 different events&lt;/a&gt; that your workflow can trigger off.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://gep13wpstorage.blob.core.windows.net/gep13/2018/12/14/workflow-triggers.png" class="img-fluid" alt="Workflow Event Triggers" /&gt;&lt;/p&gt;
&lt;h2 id="overall-impression"&gt;Overall Impression&lt;/h2&gt;
&lt;p&gt;Overall, I have to say that I am very impressed with GitHub Actions.  Things &amp;quot;just&amp;quot; worked, which is exactly what you want.  I can totally see how these small, precise actions, can be applied to the events being triggered on my repositories.  Right now, there are a number of manual steps for the Cake release process, and I can see a huge percentage of these being replaced with GitHub Actions.  I am very much looking forward to GitHub Actions coming out of beta.&lt;/p&gt;
</content>
		<summary>&lt;p&gt;On Wednesday evening, I got a very pleasant email from GitHub, telling me that I had been given access to the GitHub Actions Beta.  This is something that I have been looking forward to for a while now, ever since I signed up for it.  I am a big user of Continuous Integration Systems for building the various Open Source projects that I work on, but I really like the idea of doing smaller, precise actions, as a result of other "things" happening on a repository.&lt;/p&gt;</summary>
	</entry>
	<entry>
		<link href="http://www.gep13.co.uk/blog/introducing-cake-wyam-recipe" />
		<id>http://www.gep13.co.uk/blog/introducing-cake-wyam-recipe</id>
		<title>Introducing the Cake.Wyam.Recipe Package</title>
		<updated>2018-12-06T00:00:00Z</updated>
		<content>&lt;p&gt;This is another of those announcement blog posts that is a little on the &amp;quot;late&amp;quot; side.  This post is about the &lt;a href="https://www.nuget.org/packages/Cake.Wyam.Recipe/"&gt;Cake.Wyam.Recipe&lt;/a&gt; package, which was first released back in May 2017.  Now, in it's sixth release, I thought it was about time to tell people about it.  Better late than never...&lt;/p&gt;
&lt;h2 id="what-is-it"&gt;What is it?&lt;/h2&gt;
&lt;p&gt;Cake.Wyam.Recipe, whose source code can be found &lt;a href="https://github.com/cake-contrib/Cake.Wyam.Recipe"&gt;here&lt;/a&gt; is an opinionated set of scripts for &lt;a href="https://cakebuild.net/"&gt;Cake&lt;/a&gt;, specifically around the automation, and usage of &lt;a href="https://wyam.io/"&gt;Wyam&lt;/a&gt;.  As most of you will be aware, I am a maintainer of the Cake project, and I have been a long time user of Wyam (in fact, Wyam is used to generate this blog), so it should come as no real surprise to you that I wanted a way to reliably, and consistently, generate documentation via Wyam.&lt;/p&gt;
&lt;h2 id="why-is-this-needed"&gt;Why is this needed?&lt;/h2&gt;
&lt;p&gt;Across a number of projects that I work on, I found myself writing the same build steps over and over again for creating documentation for these projects.  This could be in the form of a blog where Wyam is being used to generate the content, or when documenting an API via the source code files for the project.  In each of these projects, I was writing almost EXACTLY the same code, but with simply a few changes here and there for project specific configuration.  After a few rounds of making a modification to one projects build scripts, only to have to duplicate that work in the other projects, I decided it was time to centralize these scripts into one location.  And that is where the Cake.Wyam.Recipe package comes in.&lt;/p&gt;
&lt;h2 id="what-does-it-do"&gt;What does it do?&lt;/h2&gt;
&lt;p&gt;In addition to wrapping the calls to Wyam to actually generate the documentation, Cake.Wyam.Recipe encompasses the complete process of publishing the documentation.  In my case, this is GitHub Pages (however, there would be nothing to stop it being extended to publish to something like Netlify, I simply haven't had the need).  The tasks that are executed by Cake.Wyam.Recipe are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Print-AppVeyor-Environment-Variables
&lt;ul&gt;
&lt;li&gt;Really a helper task.  When running on AppVeyor, it will print out all the Environment Variables used by AppVeyor.  These can be useful when debugging issues with the build process.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Clear-AppVeyor-Cache
&lt;ul&gt;
&lt;li&gt;Another helper method.  In order to speed up build times, AppVeyor allows heavy caching of files.  From time to time, it is helpful to bust this cache, again for the purposes of debugging.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Show-Info
&lt;ul&gt;
&lt;li&gt;Similar to Print-AppVeyor-Environment-Variables, this task prints out information about the current configuration of Cake.Wyam.Recipe itself&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Clean-Documentation
&lt;ul&gt;
&lt;li&gt;Tidies up the generated documentation folder, ready for re-building it&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Build-Documentation
&lt;ul&gt;
&lt;li&gt;Uses Wyam to build the documentation, based on the configuration that has been applied&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Publish-Documentation
&lt;ul&gt;
&lt;li&gt;Takes the generated documentation, and publishes it to GitHub Pages.  This will use KuduSync to verify that there are actually differences in the newly generated files, compared to what is already published, and will only publish if there are differences&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Purge-Cloudflare-Cache
&lt;ul&gt;
&lt;li&gt;I normally always use Cloudflare in front of my documentation sites, and after pushing out new documentation, it is sometimes necessary to purge the cache, so that this new documentation can be seen immediately&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Preview-Documentation
&lt;ul&gt;
&lt;li&gt;When running locally, Wyam has the ability to serve the content from a webserver, which can then be viewed.  In addition, when changes are made to the documentation, it will immediately re-build and show the changes.  This is very useful when iterating over a change&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With all of these top level tasks taken care of, it is just a case of installing Cake.Wyam.Recipe into my build process for the project I am working on, and configuring the project specific details.&lt;/p&gt;
&lt;h2 id="installation"&gt;Installation&lt;/h2&gt;
&lt;p&gt;Installing Cake.Wyam.Recipe into a build is done using Cake's &lt;code&gt;load&lt;/code&gt; pre-processor directive.  It is as simple as this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#load nuget:https://www.nuget.org/api/v2?package=Cake.Wyam.Recipe&amp;amp;version=0.6.0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here, I am telling Cake to go to NuGet and find version 0.6.0 of Cake.Wyam.Recipe, and load the scripts that it contains.  Cake will download the nupkg, extract the files into the tools folder, and then iterate through all of the &lt;code&gt;.cake&lt;/code&gt; files contained within it, into the current build.  This saves a lot of time and effort by not having to do this manually.  Then, when a new version of Cake.Wyam.Recipe is released, all that has to be done is to change the version number, and a project has the latest and greatest scripts available.&lt;/p&gt;
&lt;h2 id="usage"&gt;Usage&lt;/h2&gt;
&lt;p&gt;With that done, all that is required is to configure the project specific details.  For example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Environment.SetVariableNames();

BuildParameters.SetParameters(context: Context,
                            buildSystem: BuildSystem,
                            title: &amp;quot;gep13&amp;quot;,
                            repositoryOwner: &amp;quot;gep13&amp;quot;,
                            repositoryName: &amp;quot;gep13&amp;quot;,
                            appVeyorAccountName: &amp;quot;GaryEwanPark&amp;quot;,
                            webHost: &amp;quot;gep13.co.uk&amp;quot;,
                            shouldPurgeCloudflareCache: true);

BuildParameters.PrintParameters(Context);

Build.Run();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A lot of things in Cake.Wyam.Recipe are done via Environment Variables.  For example, storing the credentials that are used to commit and push changes to GitHub Pages, purging CLoudflare cache, etc.  Out of the box, Cake.Wyam.Recipe expects these variables to be a certain name, but it is possible to override these to your own preferences.  In the script above, calling &lt;code&gt;Environment.SetVariableNames();&lt;/code&gt; simply sets these to the default values.&lt;/p&gt;
&lt;p&gt;With that done, calling &lt;code&gt;SetParameters&lt;/code&gt; allows setting up specific information, such as the name of the project, etc.  It would also be possible to specify the Theme and Recipe to use within the Wyam execution, however, in my case, the default values of Blog and CleanBlog, are exactly what I need, so these values don't need to be changed.&lt;/p&gt;
&lt;p&gt;Then it is simply a case of printing the parameters (purely optional), and then running the build, and job done.&lt;/p&gt;
&lt;p&gt;So, when testing locally, all that is required is to execute either:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;./build.ps1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;./build.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Doing either of these will cause the default Preview-Documentation task to be executed, and on completion, you will have a webserver running to preview your changes.&lt;/p&gt;
&lt;p&gt;In a CI context, you would do something like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.\build.ps1 -Target &amp;quot;AppVeyor&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Which would execute a different path which would cause the Publish-Documentation Task to be called, rather than preview.&lt;/p&gt;
&lt;h2 id="additional-example"&gt;Additional example&lt;/h2&gt;
&lt;p&gt;Another example of where Cake.Wyam.Recipe is used is on this website:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/cake-contrib/Cake.Issues.Website/blob/develop/build.cake"&gt;https://github.com/cake-contrib/Cake.Issues.Website/blob/develop/build.cake&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Here, the Task Graph that is provided by Cake.Wyam.Recipe is extended to include some additional functionality, but the core components of it are still available.  They have simply been augmented to include additional tasks.&lt;/p&gt;
&lt;h1 id="documentation"&gt;Documentation&lt;/h1&gt;
&lt;p&gt;You can find additional documentation for this package here:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://cake-contrib.github.io/Cake.Wyam.Recipe/"&gt;https://cake-contrib.github.io/Cake.Wyam.Recipe/&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="source-code"&gt;Source Code&lt;/h1&gt;
&lt;p&gt;The source code for this Extension can be found here:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/cake-contrib/Cake.Wyam.Recipe"&gt;https://github.com/cake-contrib/Cake.Wyam.Recipe&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="chat-room"&gt;Chat Room&lt;/h1&gt;
&lt;p&gt;If you have any questions about this package, then please feel to drop into the Gitter Chat room:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://gitter.im/cake-contrib/Lobby?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge"&gt;&lt;img src="https://badges.gitter.im/cake-contrib/Lobby.svg" class="img-fluid" alt="Join the chat at https://gitter.im/cake-contrib/Lobby" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="thanks"&gt;Thanks&lt;/h1&gt;
&lt;p&gt;I have to say a huge thank you to &lt;a href="https://twitter.com/hereispascal"&gt;Pascal Berger&lt;/a&gt; who has helped out a LOT with the creation of this package.  Thank you!&lt;/p&gt;
</content>
		<summary>&lt;p&gt;This is another of those announcement blog posts that is a little on the "late" side.  This post is about the &lt;a href="https://www.nuget.org/packages/Cake.Wyam.Recipe/"&gt;Cake.Wyam.Recipe&lt;/a&gt; package, which was first released back in May 2017.  Now, in it's sixth release, I thought it was about time to tell people about it.  Better late than never...&lt;/p&gt;</summary>
	</entry>
	<entry>
		<link href="http://www.gep13.co.uk/blog/introducing-chocolatey-azure-devops-extension" />
		<id>http://www.gep13.co.uk/blog/introducing-chocolatey-azure-devops-extension</id>
		<title>Introducing the Chocolatey Azure DevOps Extension</title>
		<updated>2018-11-25T00:00:00Z</updated>
		<content>&lt;p&gt;Unlike my last &lt;a href="https://www.gep13.co.uk/blog/introducing-chocolatey-vscode-extension"&gt;blog post&lt;/a&gt;, this announcement is up to date!  Yesterday, I released the &lt;a href="https://marketplace.visualstudio.com/items?itemName=gep13.chocolatey-azuredevops"&gt;Chocolatey Extension for Azure DevOps&lt;/a&gt; which helps to execute Chocolatey commands as part of your Azure DevOps Pipelines.&lt;/p&gt;
&lt;h1 id="what-is-it"&gt;What is it?&lt;/h1&gt;
&lt;p&gt;The &lt;a href="https://marketplace.visualstudio.com/items?itemName=gep13.chocolatey-azuredevops"&gt;Chocolatey Extension for Azure DevOpsVS Code&lt;/a&gt; helps with the execution of Chocolatey commands as part of your Azure DevOps Pipelines.  All of the main Chocolatey commands, including &lt;code&gt;pack&lt;/code&gt;, &lt;code&gt;push&lt;/code&gt;, &lt;code&gt;install&lt;/code&gt;, &lt;code&gt;upgrade&lt;/code&gt; are covered, and also the ability to run any custom Chocolatey commands.&lt;/p&gt;
&lt;h1 id="why-is-this-needed"&gt;Why is this needed?&lt;/h1&gt;
&lt;h2 id="isnt-there-already-some-chocolatey-azure-devops-extensions"&gt;Isn't there already some Chocolatey Azure DevOps Extensions?&lt;/h2&gt;
&lt;p&gt;Yes, this is absolutely correct, there are.  Unfortunately, one of them doesn't currently work correctly and doesn't seem to be being maintained, and the other focuses on only a couple Chocolatey commands.  As a result, I decided that I would create another Chocolatey Extension, modelled on the existing NuGet Extension, which allows the execution of any Chocolatey Command.  In addition, creating a Azure DevOps extension for Chocolatey was one of those itches that had to be scratched, and I hope it is useful for you.  I also feel that this is a good compliment for the &lt;a href="https://marketplace.visualstudio.com/items?itemName=gep13.chocolatey-vscode"&gt;Chocolatey VS Code Extension&lt;/a&gt; which I have also created.&lt;/p&gt;
&lt;h2 id="isnt-chocolatey-already-installed-on-the-azure-build-agents"&gt;Isn't Chocolatey already installed on the Azure Build Agents?&lt;/h2&gt;
&lt;p&gt;Yes, this is also absolutely true.  As a result, it is possible to use a normal PowerShell Task to execute Chocolatey.  This Extension simply makes that process a little easier, by showing you the expected inputs to each command.&lt;/p&gt;
&lt;h1 id="installation"&gt;Installation&lt;/h1&gt;
&lt;p&gt;Installing the &lt;a href="https://marketplace.visualstudio.com/items?itemName=gep13.chocolatey-azuredevops"&gt;Chocolatey Extension for Azure DevOps&lt;/a&gt; is simple.  Go to the &lt;a href="https://marketplace.visualstudio.com/items?itemName=gep13.chocolatey-azuredevops"&gt;extension page&lt;/a&gt; in the marketplace and click the &lt;code&gt;Get it free&lt;/code&gt; button:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://gep13wpstorage.blob.core.windows.net/gep13/2018/11/25/Chocolatey-Get-It-Free.png" class="img-fluid" alt="Chocolatey Get It Free" /&gt;&lt;/p&gt;
&lt;p&gt;You will then be prompted which Organisation you would like to install the Extension into.&lt;/p&gt;
&lt;h1 id="usage"&gt;Usage&lt;/h1&gt;
&lt;p&gt;Once installed, create a Pipeline (if you don't already have one), and choose the option to add a new Task.  You will find the Chocolatey Task under the Build section, or you can use the search.  Once found, select the option to add the task:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://gep13wpstorage.blob.core.windows.net/gep13/2018/11/25/Chocolatey-Add-New-Task.png" class="img-fluid" alt="Chocolatey Add New Task" /&gt;&lt;/p&gt;
&lt;p&gt;With that done, drill into the options for the task, and select what command you want to use:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://gep13wpstorage.blob.core.windows.net/gep13/2018/11/25/Chocolatey-Task.png" class="img-fluid" alt="Chocolatey Task" /&gt;&lt;/p&gt;
&lt;p&gt;You have the option to pick from the following commands:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;apikey&lt;/li&gt;
&lt;li&gt;config&lt;/li&gt;
&lt;li&gt;custom&lt;/li&gt;
&lt;li&gt;feature&lt;/li&gt;
&lt;li&gt;install&lt;/li&gt;
&lt;li&gt;pack&lt;/li&gt;
&lt;li&gt;push&lt;/li&gt;
&lt;li&gt;source&lt;/li&gt;
&lt;li&gt;upgrade&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All required arguments for each command are marked as required, and the Azure DevOps Task will illustrate this in the usual way.&lt;/p&gt;
&lt;h1 id="notes"&gt;Notes&lt;/h1&gt;
&lt;p&gt;Currently, this extension assumes that Chocolatey is already installed on the Build Agent executing this build.  The Task will check to see if Chocolatey can be located before attempting to execute, however, if it is not there, it will throw an exception, which will fail the build.  There is an open issue &lt;a href="https://github.com/gep13/chocolatey-azuredevops/issues/13"&gt;here&lt;/a&gt;, for adding an additional task to install/upgrade Chocolatey, similar to the NuGet Tool Installer task.&lt;/p&gt;
&lt;h1 id="documentation"&gt;Documentation&lt;/h1&gt;
&lt;p&gt;You can find additional documentation for this extension here:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://gep13.github.io/chocolatey-azuredevops/"&gt;https://gep13.github.io/chocolatey-azuredevops/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;:  At the time of writing this blog post, there is little to no documentation, but the scaffolding is there to get some added, so if you are interested, please feel free to jump in and help.&lt;/p&gt;
&lt;h1 id="resources"&gt;Resources&lt;/h1&gt;
&lt;p&gt;If you are interested in hearing about new functions that are being added into the Extension, I have a YouTube Playlist &lt;a href="https://www.youtube.com/playlist?list=PL84yg23i9GBhGahFf5-41vOJhn3D-6EUU"&gt;here&lt;/a&gt;, where I will push short videos of the new functionality as each version is released.&lt;/p&gt;
&lt;h1 id="source-code"&gt;Source Code&lt;/h1&gt;
&lt;p&gt;The source code for this Extension can be found here:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/gep13/chocolatey-azuredevops"&gt;https://github.com/gep13/chocolatey-azuredevops&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="chat-room"&gt;Chat Room&lt;/h1&gt;
&lt;p&gt;If you have any questions about this Extension, then please feel to drop into the Gitter Chat room:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://gitter.im/gep13-oss/community?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge"&gt;&lt;img src="https://badges.gitter.im/gep13-oss/community.svg" class="img-fluid" alt="Join the chat at https://gitter.im/gep13-oss/community" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="thanks"&gt;Thanks&lt;/h1&gt;
&lt;p&gt;Huge thank you to the following people who helped review early versions of this extension, and provided feedback on how it can be improved:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/devlead"&gt;Mattias Karlsson&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/hereispascal"&gt;Pascal Berger&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/onovotny"&gt;Oren Novotny&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As well as the creators of the &lt;a href="https://github.com/Microsoft/azure-pipelines-tasks/tree/master/Tasks/NuGetCommandV2"&gt;NuGet Extension for Azure DevOps&lt;/a&gt;, which provided a very solid basis on which to develop the Chocolatey version.&lt;/p&gt;
&lt;p&gt;A special thanks to &lt;a href="https://twitter.com/camsoper"&gt;Cam Soper&lt;/a&gt; for helping out with some of the questions I had &lt;a href="https://twitter.com/camsoper/status/1061718818467274753"&gt;regarding some specifics&lt;/a&gt; around Azure Devops Tasks.&lt;/p&gt;
&lt;p&gt;In addition, I would like to thank the authors of the existing Chocolatey Extensions for Azure DevOps, which also helped in shaping this implementation.&lt;/p&gt;
</content>
		<summary>&lt;p&gt;Unlike my last &lt;a href="https://www.gep13.co.uk/blog/introducing-chocolatey-vscode-extension"&gt;blog post&lt;/a&gt;, this announcement is up to date!  Yesterday, I released the &lt;a href="https://marketplace.visualstudio.com/items?itemName=gep13.chocolatey-azuredevops"&gt;Chocolatey Extension for Azure DevOps&lt;/a&gt; which helps to execute Chocolatey commands as part of your Azure DevOps Pipelines.&lt;/p&gt;</summary>
	</entry>
	<entry>
		<link href="http://www.gep13.co.uk/blog/introducing-chocolatey-vscode-extension" />
		<id>http://www.gep13.co.uk/blog/introducing-chocolatey-vscode-extension</id>
		<title>Introducing the Chocolatey VS Code Extension</title>
		<updated>2018-11-25T00:00:00Z</updated>
		<content>&lt;p&gt;This announcement blog post is a &amp;quot;little&amp;quot; late.  The first version of this &lt;a href="https://marketplace.visualstudio.com/items?itemName=gep13.chocolatey-vscode"&gt;VS Code Extension&lt;/a&gt; was created back in January 2016, however, it is only recently that it has been given a new lease of life, with some additional functionality around executing Chocolatey commands from within VS Code.  As a result, I thought this was a good time to introduce it properly.&lt;/p&gt;
&lt;h1 id="what-is-it"&gt;What is it?&lt;/h1&gt;
&lt;p&gt;The &lt;a href="https://marketplace.visualstudio.com/items?itemName=gep13.chocolatey-vscode"&gt;Chocolatey Extension for VS Code&lt;/a&gt; brings with it a number of commands and snippets to help with the creation and packaging of Chocolatey packages.  There are plans for adding more commands into the extension as time permits, and if you are interested in helping out with adding more functionality, please feel free to get in touch.&lt;/p&gt;
&lt;h1 id="why-is-this-needed"&gt;Why is this needed?&lt;/h1&gt;
&lt;p&gt;When getting started with Chocolatey, it can be a little daunting to get up to speed with the various commands that are required to create, pack and push, Chocolatey packages.  While there is extensive documentation to guide you through this process, it can be a little overwhelming.  This extension is an attempt to help with some of these tasks, to help guide you through this process, via the use of snippets, and most recently, commands.&lt;/p&gt;
&lt;h1 id="installation"&gt;Installation&lt;/h1&gt;
&lt;p&gt;Installing the &lt;a href="https://marketplace.visualstudio.com/items?itemName=gep13.chocolatey-vscode"&gt;Chocolatey Extension for VS Code&lt;/a&gt; is simple, it installs in the same way as any other extension.  Open Extensions from the left hand side section of VS Code, or select View | Extensions.  Then do a search for &amp;quot;chocolatey&amp;quot; and the extension with an author of &amp;quot;Gary Ewan Park&amp;quot; should be returned.  Go ahead and install the extension:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://gep13wpstorage.blob.core.windows.net/gep13/2018/11/25/Chocolatey-Extension-Install.png" class="img-fluid" alt="Chocolatey Extension Install" /&gt;&lt;/p&gt;
&lt;p&gt;When prompted, click the Reload button.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://gep13wpstorage.blob.core.windows.net/gep13/2018/11/25/Chocolatey-Extension-Reload.png" class="img-fluid" alt="Chocolatey Extension Reload" /&gt;&lt;/p&gt;
&lt;h1 id="usage"&gt;Usage&lt;/h1&gt;
&lt;h2 id="snippets"&gt;Snippets&lt;/h2&gt;
&lt;p&gt;While you are editing your Chocolatey Packaging scripts, you can begin typing the word &lt;code&gt;choco&lt;/code&gt; and it will bring up some snippets to help with the creation of some of the Chocolatey Helper methods, as shown here:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://gep13wpstorage.blob.core.windows.net/gep13/2018/11/25/Chocolatey-Snippets.png" class="img-fluid" alt="Chocolatey Snippets" /&gt;&lt;/p&gt;
&lt;p&gt;After selecting one, you will then have the option of pressing the tab key on your keyboard, to start stepping through the various parameters, filling in the ones that are required.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://gep13wpstorage.blob.core.windows.net/gep13/2018/11/25/Chocolatey-Snippet-Output.png" class="img-fluid" alt="Chocolatey Snippet Output" /&gt;&lt;/p&gt;
&lt;p&gt;The snippets that are generated are based on the Chocolatey Best Practices from the output of the default template from the &lt;code&gt;choco new&lt;/code&gt; command.&lt;/p&gt;
&lt;h2 id="commands"&gt;Commands&lt;/h2&gt;
&lt;p&gt;If you open the command palette for VS Code, and type &lt;code&gt;choco&lt;/code&gt;, you will be met with two commands:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create new Chocolatey Package&lt;/li&gt;
&lt;li&gt;Pack Chocolatey Package(s)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="https://gep13wpstorage.blob.core.windows.net/gep13/2018/11/25/Chocolatey-Commands.png" class="img-fluid" alt="Chocolatey Commands" /&gt;&lt;/p&gt;
&lt;p&gt;The first will take as an input the name of the Chocolatey Package that you want to create, and it will then execute the &lt;code&gt;choco new&lt;/code&gt; command, placing the output into the root of the current workspace which is open in VS Code.  You can see the output here:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://gep13wpstorage.blob.core.windows.net/gep13/2018/11/25/Chocolatey-New-Output.png" class="img-fluid" alt="Chocolatey New Output" /&gt;&lt;/p&gt;
&lt;p&gt;The second command will look through the current workspace, and find any &lt;code&gt;*.nuspec&lt;/code&gt; files that are contained with it.  Then, you can either select an individual nuspec file, or all of them, to then execute the &lt;code&gt;choco pack&lt;/code&gt; command on them.  You will be prompted for any additional arguments that you would like to pass into this command.  For example, you might want to pass something like the following:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-sh"&gt;--output-directory=&amp;quot;'c:/temp'&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To have the generated &lt;code&gt;*.nupkg&lt;/code&gt; files placed into a different directory, rather than being generated next to the nuspec file.&lt;/p&gt;
&lt;h1 id="notes"&gt;Notes&lt;/h1&gt;
&lt;p&gt;While you can install this extension in VS Code running on other operating systems, it will only work in its entirity on a Windows Machine.  Attempting to run the commands on another operating system, will result in the following:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://gep13wpstorage.blob.core.windows.net/gep13/2018/11/25/Chocolatey-Not-Installed.png" class="img-fluid" alt="Chocolatey Not Installed" /&gt;&lt;/p&gt;
&lt;h1 id="documentation"&gt;Documentation&lt;/h1&gt;
&lt;p&gt;You can find additional documentation for this extension here:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://gep13.github.io/chocolatey-vscode/"&gt;https://gep13.github.io/chocolatey-vscode/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;:  At the time of writing this blog post, there is little to no documentation, but the scaffolding is there to get some added, so if you are interested, please feel free to jump in and help.&lt;/p&gt;
&lt;h1 id="resources"&gt;Resources&lt;/h1&gt;
&lt;p&gt;If you are interested in hearing about new functions that are being added into the Extension, I have a YouTube Playlist &lt;a href="https://www.youtube.com/playlist?list=PL84yg23i9GBhIhNG4LaeXNHwxZYJaSqgj"&gt;here&lt;/a&gt;, where I will push short videos of the new functionality as each version is released.&lt;/p&gt;
&lt;h1 id="source-code"&gt;Source Code&lt;/h1&gt;
&lt;p&gt;The source code for this Extension can be found here:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/gep13/chocolatey-vscode"&gt;https://github.com/gep13/chocolatey-vscode&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="chat-room"&gt;Chat Room&lt;/h1&gt;
&lt;p&gt;If you have any questions about this Extension, then please feel to drop into the Gitter Chat room:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://gitter.im/gep13-oss/community?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge"&gt;&lt;img src="https://badges.gitter.im/gep13-oss/community.svg" class="img-fluid" alt="Join the chat at https://gitter.im/gep13-oss/community" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="thanks"&gt;Thanks&lt;/h1&gt;
&lt;p&gt;The execution of the Chocolatey commands in this extension would not have been possible without the amazing work of the &lt;a href="https://github.com/felixrieseberg/vsc-ember-cli"&gt;Ember CLI VS Code extension&lt;/a&gt;, as this was used as the basis for creating this feature in this extension. Huge thanks to &lt;a href="Fhttps://github.com/felixrieseber"&gt;Felix Rieseberg&lt;/a&gt;.&lt;/p&gt;
</content>
		<summary>&lt;p&gt;This announcement blog post is a "little" late.  The first version of this &lt;a href="https://marketplace.visualstudio.com/items?itemName=gep13.chocolatey-vscode"&gt;VS Code Extension&lt;/a&gt; was created back in January 2016, however, it is only recently that it has been given a new lease of life, with some additional functionality around executing Chocolatey commands from within VS Code.  As a result, I thought this was a good time to introduce it properly.&lt;/p&gt;</summary>
	</entry>
	<entry>
		<link href="http://www.gep13.co.uk/blog/stack-overflow-reputation-history" />
		<id>http://www.gep13.co.uk/blog/stack-overflow-reputation-history</id>
		<title>Stack Overflow Reputation History</title>
		<updated>2018-11-04T00:00:00Z</updated>
		<content>&lt;p&gt;Anyone that knows me, knows that I like numbers.  I like to track numbers over time, and see how things are changing.  Are they getting better?  Worse?&lt;/p&gt;
&lt;p&gt;So with this in mind, a couple months ago, I was looking at my Stack Overflow profile, and I was curious about how, if at all, my reputation points (you know, those Internet points, that don't really mean anything to anyone, but it is still nice to have them?!?), had changed over time.&lt;/p&gt;
&lt;h1 id="the-problem"&gt;The Problem&lt;/h1&gt;
&lt;p&gt;On the main Stack Overflow Profile page, you are met with this:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://gep13wpstorage.blob.core.windows.net/gep13/2018/11/04/Stack-Overflow-Reputation.png" class="img-fluid" alt="Stack Overflow Reputation" /&gt;&lt;/p&gt;
&lt;p&gt;Now, granted, I can hover over this little bar graph, and I see a tooltip for what is was at a particular point in time, but it isn't very clear on what date it correlates to.&lt;/p&gt;
&lt;h1 id="what-did-you-do"&gt;What did you do?&lt;/h1&gt;
&lt;p&gt;So, I went googling, thinking that this must be something that can be done better.  Stack Overflow is made by a bunch of developers, who likely also like numbers.  What I turned up was that there is a REST API for getting additional information back from Stack Overflow, but in all honesty, I didn't want to have to go to that length to have to get this information.  I even sent out a Tweet about it, as I thought that this &lt;strong&gt;must&lt;/strong&gt; be possible:&lt;/p&gt;
&lt;blockquote class="twitter-tweet" data-lang="en"&gt;&lt;p lang="en" dir="ltr"&gt;&lt;a href="https://twitter.com/jonskeet?ref_src=twsrc%5Etfw"&gt;&amp;#64;jonskeet&lt;/a&gt; random question for you... Do you know if this is possible? &lt;a href="https://t.co/pYggrm2lUv"&gt;https://t.co/pYggrm2lUv&lt;/a&gt; It was suggested that it was, but I didn&amp;#39;t get a follow up.  Thanks in advance!&lt;/p&gt;&amp;mdash; Gary Ewan Park (&amp;#64;gep13) &lt;a href="https://twitter.com/gep13/status/975662609176387584?ref_src=twsrc%5Etfw"&gt;March 19, 2018&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;h1 id="what-was-the-outcome"&gt;What was the outcome?&lt;/h1&gt;
&lt;p&gt;After a bit of digging, I found that you can get MUCH more information on your Network Profile page, rather than simply your Stack Overflow Profile page.  For those that aren't aware, you can get to this from here:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://gep13wpstorage.blob.core.windows.net/gep13/2018/11/04/Link-To-Network-Profile.png" class="img-fluid" alt="Link to Network Profile" /&gt;&lt;/p&gt;
&lt;p&gt;And once there, if you click on the reputation tab, you get a much larger line graph, with much more detail about your reputation, and on what day it changed, etc.  So now you can rejoice in more data than you will ever need on these particular Internet Points.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://gep13wpstorage.blob.core.windows.net/gep13/2018/11/04/Network-Profile-Reputation.png" class="img-fluid" alt="Network Profile Reputation" /&gt;&lt;/p&gt;
&lt;p&gt;This post is mainly for me to remember where I can get this information again if I ever need it, and I thought that is might be useful to other like minded, numbers oriented people.&lt;/p&gt;
</content>
		<summary>&lt;p&gt;Anyone that knows me, knows that I like numbers.  I like to track numbers over time, and see how things are changing.  Are they getting better?  Worse?&lt;/p&gt;</summary>
	</entry>
	<entry>
		<link href="http://www.gep13.co.uk/blog/chocolatey-error-hashes-do-not-match" />
		<id>http://www.gep13.co.uk/blog/chocolatey-error-hashes-do-not-match</id>
		<title>Chocolatey Package Error - Checksums do not match</title>
		<updated>2018-10-29T00:00:00Z</updated>
		<content>&lt;p&gt;Earlier today on Twitter, I was asked this question:&lt;/p&gt;
&lt;blockquote class="twitter-tweet" data-lang="en"&gt;&lt;p lang="en" dir="ltr"&gt;&lt;a href="https://twitter.com/gep13?ref_src=twsrc%5Etfw"&gt;&amp;#64;gep13&lt;/a&gt; I tried installing &lt;a href="https://twitter.com/JuliaLanguage?ref_src=twsrc%5Etfw"&gt;&amp;#64;JuliaLanguage&lt;/a&gt; but I get this error: &lt;a href="https://t.co/QEvqqayjSU"&gt;https://t.co/QEvqqayjSU&lt;/a&gt;&lt;br&gt;I would appreciate if you could help&lt;/p&gt;&amp;mdash; Foad Sojoodi Farimani (&amp;#64;fsfarimani) &lt;a href="https://twitter.com/fsfarimani/status/1056873572344356864?ref_src=twsrc%5Etfw"&gt;October 29, 2018&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;I started to write a response, but I realised that it was going to take more than 240 characters to explain, so I thought I would write a blog post about it instead.&lt;/p&gt;
&lt;h1 id="the-error"&gt;The Error&lt;/h1&gt;
&lt;p&gt;The error that is being reported by Chocolatey is this:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://gep13wpstorage.blob.core.windows.net/gep13/2018/10/29/checksums-do-not-match.png" class="img-fluid" alt="Checksums do not match" /&gt;&lt;/p&gt;
&lt;p&gt;I verified that I was getting the same error message by testing the installation on the local Chocolatey Testing Environment.&lt;/p&gt;
&lt;h1 id="what-does-this-mean"&gt;What does this mean?&lt;/h1&gt;
&lt;p&gt;That's great, but what does that actually mean?  Let's break this log down a little bit...&lt;/p&gt;
&lt;blockquote class="blockquote"&gt;
&lt;p&gt;Progress: 100% - Completed download of C:\Users\Administrator\AppData\Local\Temp\chocolatey\Julia\1.0.0\julia-1.0.0-win64.exe
(52.83 MB).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This tells us that Chocolatey successfully went into the chocolateyInstall.ps1 file and found the download URL that the package maintainer put in there.  Notice that it has downloaded the 64-bit version of this installer, since I ran it on a 64-bit operating system.&lt;/p&gt;
&lt;blockquote class="blockquote"&gt;
&lt;p&gt;Download of julia-1.0.0-win64.exe (52.83 MB) completed.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This tells us that Chocolatey was successfully able to download a file from the specified URL.&lt;/p&gt;
&lt;blockquote class="blockquote"&gt;
&lt;p&gt;Error - hashes do not match. Actual value was '001874185A26F598ABE2E7FC287CACF66387C68CAA3251F5AA6EF97FB22020DD'.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is where things start to go wrong.  When the download of a file has been completed, Chocolatey will take a checksum (i.e. a hash) of the file.  This can then be compared to the checksum (if provided) by the package maintainer.  In this case, the package maintainer expected the checksum of the file to be &lt;code&gt;3bf5572cbcbc7848b235dcf21caf24ce26b9fb3839eb13db1a7170d20cdf834d&lt;/code&gt; but it was actually &lt;code&gt;001874185A26F598ABE2E7FC287CACF66387C68CAA3251F5AA6EF97FB22020DD&lt;/code&gt;.  Since Chocolatey is secure by default, the installation of the package immediately exits, and an error is thrown:&lt;/p&gt;
&lt;blockquote class="blockquote"&gt;
&lt;p&gt;ERROR: Checksum for 'C:\Users\Administrator\AppData\Local\Temp\chocolatey\Julia\1.0.0\julia-1.0.0-win64.exe' did not meet '3b
f5572cbcbc7848b235dcf21caf24ce26b9fb3839eb13db1a7170d20cdf834d' for checksum type 'sha256'.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id="why-do-we-need-checksums"&gt;Why do we need checksums?&lt;/h1&gt;
&lt;p&gt;Chocolatey introduced the concept of checksums for package installation to provide some assurance to the end users of Chocolatey that the application installers that are being downloaded are correct/valid.  At the time of creating a package, we ask package maintainers to include the checksum for the files that are being downloaded, so that at installation time, this checksum can be asserted to ensure that what is being installed is what is expected.  This protects the user from any malicious tampering of the application installer.  When creating the package, the maintainer can sometimes find the published checksum of the files on the vendor website, or they can calculate the checksum of the file(s) themselves once they have tested to make sure that it is installed correctly.&lt;/p&gt;
&lt;h1 id="so-why-did-this-go-wrong"&gt;So why did this go wrong?&lt;/h1&gt;
&lt;p&gt;Now, all of this makes perfect sense, and will work flawlessly, until one of two common things happen.&lt;/p&gt;
&lt;p&gt;Firstly, some packages (like Google Chrome) don't included versioned URL's for their application installer.  As a result, you can only ever download the Chrome installer from one location, namely &lt;code&gt;https://dl.google.com/tag/s/dl/chrome/install/googlechromestandaloneenterprise64.msi&lt;/code&gt;.  As a result, whenever Google push out a new version of Chrome, which happens quite frequently, the most recent package version of Chrome on Chocolatey.org is immediately broken.  This is due to the fact that the checksum within the Chocolatey package is still the checksum for the old installer available at that URL, which has now been replaced with the new one.  In the case of the Google Chrome package, it is part of the &lt;a href="https://github.com/chocolatey/chocolatey-coreteampackages"&gt;Core Team Packages&lt;/a&gt; which checks for new package versions every 6 hours, and automatically pushes out a new package when detected.  As a result of this, the Google Chrome package is normally only &amp;quot;broken&amp;quot; for a short period of time.&lt;/p&gt;
&lt;p&gt;The second way that checksums will break is if vendor &amp;quot;change&amp;quot; the application installer once it has been published, without changing the version number.  Unfortunately, this happens more often than you would think.  Let's walk this through...&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A vendor creates a new version of their application, let's call it 1.0.0, and publishes it to their website.&lt;/li&gt;
&lt;li&gt;A Chocolatey Package maintainer spots that there is a new version pf the application, and sets about creating the Chocolatey package.  They download the installer, test that it is all working, and then calculate the checksum, update their packaging scripts, run &lt;code&gt;choco pack&lt;/code&gt; and push the package version to Chocolatey.org&lt;/li&gt;
&lt;li&gt;The automated checks on Chocolatey.org then kick in to make sure that the package does indeed download and install correctly, including verifying that the hashes match.&lt;/li&gt;
&lt;li&gt;The package is then moved to human moderation, and the package is ultimately approved.&lt;/li&gt;
&lt;li&gt;Some time later, the vendor then notices that there is a problem with the installer, and rather than increment the version number, they simply re-build the installer, and replace it on their website.&lt;/li&gt;
&lt;li&gt;To anyone installing the application directly from the website, there are no problems.  However, to anyone installing the Chocolatey package, there will be error, as the checksum on the file which is downloaded, compared to the checksum in the Chocolatey package, will no longer match.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Since we know that the package in question completed the automated installation test, we know that at one point the checksum on the installer did match what is in the package, however, this installer no longer has this checksum.&lt;/p&gt;
&lt;h1 id="what-can-i-do-about-it"&gt;What can I do about it?&lt;/h1&gt;
&lt;p&gt;The best way to fix this problem would be to reach out to the maintainers of the package and ask them to push a new package version that includes the correct checksum.  In the case of this package, there is actually a new version of the application available, so this package is due to be updated.  If there wasn't a new version available, then the maintainer could push a new package version using what is known as the &lt;a href="https://chocolatey.org/docs/create-packages#package-fix-version-notation"&gt;package fix notation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If this isn't an option, or you need the installation &amp;quot;right&amp;quot; now, you have two options, both of which are mentioned in the error message above.  The first would be to run this command:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;choco install julia --checksum64 001874185A26F598ABE2E7FC287CACF66387C68CAA3251F5AA6EF97FB22020DD
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The checksum in question is actually reported from Chocolatey, so what you need to ascertain is whether you trust that checksum.  To be safe, you would probably want to go to the vendor download page and verify this yourself.&lt;/p&gt;
&lt;p&gt;The final option would be to run the command:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;choco install julia --ignore-checksums
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is by far the least secure method, and it isn't one that I recommend.&lt;/p&gt;
&lt;h1 id="summary"&gt;Summary&lt;/h1&gt;
&lt;p&gt;Due to the fact that Chocolatey is secure by default, there are situations like this that do occur.  However, please bear in mind that Chocolatey is trying to protect you from what could be a malicious installer.&lt;/p&gt;
</content>
		<summary>&lt;p&gt;Earlier today on Twitter, I was asked this question:&lt;/p&gt;</summary>
	</entry>
	<entry>
		<link href="http://www.gep13.co.uk/blog/introducing-cake.discord-addin" />
		<id>http://www.gep13.co.uk/blog/introducing-cake.discord-addin</id>
		<title>Introducing the Cake.Discord Addin</title>
		<updated>2018-10-28T00:00:00Z</updated>
		<content>&lt;h1 id="what-is-it"&gt;What is it?&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://www.nuget.org/packages/Cake.Discord/"&gt;Cake.Discord&lt;/a&gt; is an addin for Cake that allows you to send messages to a Discord Channel on a Server.  This allows for example sending a notification to a channel when a build fails, or succeeds.  Or perhaps when a new release of an application has been created.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; While it is possible to send much more complicated messages to a Discord server, this initial release of the addin only caters for the basic versions of the messages.&lt;/p&gt;
&lt;h1 id="usage"&gt;Usage&lt;/h1&gt;
&lt;p&gt;To get started using this addin, all you need to do is add the following to your Cake script:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;#addin &amp;quot;nuget:https://www.nuget.org/api/v2?package=Cake.Discord&amp;amp;version=0.1.0&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; Depending on the currently released version, you might want to change the above to reflect the current version number. The above is shown to ensure that the best practice of pinning your Cake Addin version numbers is adhered to.&lt;/p&gt;
&lt;p&gt;With that done, you can then send a basic message using something like the following:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;Information(&amp;quot;This is a 'normal' message...&amp;quot;);

var postMessageResult = Discord.Chat.PostMessage(
    webHookUrl:&amp;quot;https://your_web_hook_url&amp;quot;,
    content:&amp;quot;This is a normal message.&amp;quot;
);

if (postMessageResult.Ok)
{
    Information(&amp;quot;Message {0} successfully sent&amp;quot;, postMessageResult.TimeStamp);
}
else
{
    Error(&amp;quot;Failed to send message: {0}&amp;quot;, postMessageResult.Error);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It is also possible to send a more complex message using something like the following:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;Information(&amp;quot;This is a custom avatar and name message...&amp;quot;);

var postMessageResult = Discord.Chat.PostMessage(
    webHookUrl:&amp;quot;https://your_web_hook_url&amp;quot;,
    content:&amp;quot;This is a custom avatar and name message.&amp;quot;,
    messageSettings: new DiscordChatMessageSettings {
        UserName = &amp;quot;gep13&amp;quot;,
        AvatarUrl = new Uri(&amp;quot;https://avatars0.githubusercontent.com/u/1271146?s=400&amp;amp;v=4&amp;quot;)
    }
);

if (postMessageResult.Ok)
{
    Information(&amp;quot;Message {0} successfully sent&amp;quot;, postMessageResult.TimeStamp);
}
else
{
    Error(&amp;quot;Failed to send message: {0}&amp;quot;, postMessageResult.Error);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id="documentation"&gt;Documentation&lt;/h1&gt;
&lt;p&gt;You can find additional documentation for this addin here:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://cake-contrib.github.io/Cake.Discord/"&gt;https://cake-contrib.github.io/Cake.Discord/&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="source-code"&gt;Source Code&lt;/h1&gt;
&lt;p&gt;The source code for this addin can be found here:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/cake-contrib/Cake.Discord"&gt;https://github.com/cake-contrib/Cake.Discord&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="chat-room"&gt;Chat Room&lt;/h2&gt;
&lt;p&gt;If you have any questions about this addin, then please feel to drop into the Gitter Chat room for all the addins and modules which exist in the &lt;a href="https://github.com/cake-contrib"&gt;cake-contrib organisation&lt;/a&gt; on GitHub:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://gitter.im/cake-contrib/Lobby?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge"&gt;&lt;img src="https://badges.gitter.im/cake-contrib/Lobby.svg" class="img-fluid" alt="Join the chat at https://gitter.im/cake-contrib/Lobby" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="other-notification-addins"&gt;Other Notification Addins&lt;/h2&gt;
&lt;p&gt;This addin adds to the collection of addins which help with sending notifications out to the various platforms that exist.  For example, there are addins to help with sending notifications to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/cake-contrib/Cake.CakeMail/"&gt;CakeMail&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/cake-contrib/Cake.Email/"&gt;Email&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/cake-contrib/Cake.Gitter/"&gt;Gitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/cake-contrib/Cake.HipChat/"&gt;HipChat&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Ninglin/Cake.Jira/"&gt;Jira&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/cake-contrib/Cake.MicrosoftTeams/"&gt;Microsoft Teams&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/cake-contrib/Cake.SendGrid/"&gt;SendGrid&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/cake-contrib/Cake.Slack/"&gt;Slack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/cake-contrib/Cake.Twitter/"&gt;Twitter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Are there any other notification systems that you feel should be catered for in Cake?  If so, feel free to reach out, or create your own.&lt;/p&gt;
</content>
		<summary>&lt;p&gt;&lt;a href="https://www.nuget.org/packages/Cake.Discord/"&gt;Cake.Discord&lt;/a&gt; is an addin for Cake that allows you to send messages to a Discord Channel on a Server.  This allows for example sending a notification to a channel when a build fails, or succeeds.  Or perhaps when a new release of an application has been created.&lt;/p&gt;</summary>
	</entry>
	<entry>
		<link href="http://www.gep13.co.uk/blog/installing-mojave" />
		<id>http://www.gep13.co.uk/blog/installing-mojave</id>
		<title>Installing macOS Mojave</title>
		<updated>2018-10-23T00:00:00Z</updated>
		<content>&lt;p&gt;A few days ago, I got this notification on my Mac:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://gep13wpstorage.blob.core.windows.net/gep13/2018/10/23/should-i-do-this.jpg_large" class="img-fluid" alt="Should I do this" /&gt;&lt;/p&gt;
&lt;p&gt;Since getting my Mac at the start of this year when I started working for Chocolatey Software, Inc, this is the first major operating system update that I have been presented with, so I was a little anxious.&lt;/p&gt;
&lt;p&gt;I reached out to Twitter, and the overall responses seemed to be positive, so I thought I would go for it.&lt;/p&gt;
&lt;blockquote class="twitter-tweet" data-lang="en"&gt;&lt;p lang="en" dir="ltr"&gt;Should I do this?  Any known problems? &lt;a href="https://t.co/hk9900cYZG"&gt;pic.twitter.com/hk9900cYZG&lt;/a&gt;&lt;/p&gt;&amp;mdash; Gary Ewan Park (&amp;#64;gep13) &lt;a href="https://twitter.com/gep13/status/1054355206048284672?ref_src=twsrc%5Etfw"&gt;October 22, 2018&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;After making sure that everything was backed up via Time Machine, and Backblaze, I clicked the install button...&lt;/p&gt;
&lt;h2 id="how-did-it-go"&gt;How did it go?&lt;/h2&gt;
&lt;p&gt;I am happy to say that overall, the process was fairly straight forward, as shown in the series to screenshots below.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://gep13wpstorage.blob.core.windows.net/gep13/2018/10/23/first-step.png" class="img-fluid" alt="First Step" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://gep13wpstorage.blob.core.windows.net/gep13/2018/10/23/dock-icon.png" class="img-fluid" alt="Dock Icon" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://gep13wpstorage.blob.core.windows.net/gep13/2018/10/23/getting-started.png" class="img-fluid" alt="Getting started" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://gep13wpstorage.blob.core.windows.net/gep13/2018/10/23/accept-the-license.png" class="img-fluid" alt="Accept the license" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://gep13wpstorage.blob.core.windows.net/gep13/2018/10/23/install-mojave.png" class="img-fluid" alt="Install Mojave" /&gt;&lt;/p&gt;
&lt;p&gt;Where did I put that power cord?&lt;/p&gt;
&lt;p&gt;&lt;img src="https://gep13wpstorage.blob.core.windows.net/gep13/2018/10/23/give-me-power.png" class="img-fluid" alt="Give me power" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://gep13wpstorage.blob.core.windows.net/gep13/2018/10/23/give-me-access.png" class="img-fluid" alt="Give me access" /&gt;&lt;/p&gt;
&lt;p&gt;How good is the Apple Random Number Generator?&lt;/p&gt;
&lt;p&gt;&lt;img src="https://gep13wpstorage.blob.core.windows.net/gep13/2018/10/23/10-minutes-remaining.png" class="img-fluid" alt="10 minutes remaining" /&gt;&lt;/p&gt;
&lt;p&gt;Turns out it was pretty good!&lt;/p&gt;
&lt;p&gt;&lt;img src="https://gep13wpstorage.blob.core.windows.net/gep13/2018/10/23/click-to-restart.png" class="img-fluid" alt="Click to restart" /&gt;&lt;/p&gt;
&lt;p&gt;At this point, the Mac restarted a couple times, and proceeded to show the Apple Icon for about 30 minutes, while it did it's work.&lt;/p&gt;
&lt;p&gt;After selecting a few options, including selecting the new Dark Theme, I was welcomed with this:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://gep13wpstorage.blob.core.windows.net/gep13/2018/10/23/mojave-desktop.png" class="img-fluid" alt="Mojave Desktop" /&gt;&lt;/p&gt;
&lt;p&gt;Having played with it for a little while now, everything seems to be working fine.  The only slight issue that I have noticed is that when starting up some applications, I see something that looks like the following:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://gep13wpstorage.blob.core.windows.net/gep13/2018/10/23/access-the-microphone.png" class="img-fluid" alt="Access the microphone" /&gt;&lt;/p&gt;
&lt;p&gt;I believe in this latest version of the Operating System there are some additional permissions that applications need to request in order to continue doing what they were doing before.  I have seen this also pop up on applications like VMWare Fusion, Slack, etc.  Seems to be anything that has the ability to interact with the hardware of the machine.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;UPDATE: 24 Oct 2018&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;After switching on computer this morning, I was met with a slightly more scary warning from the Backblaze Application:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://gep13wpstorage.blob.core.windows.net/gep13/2018/10/23/backblaze-notification.png" class="img-fluid" alt="Backblaze notification" /&gt;&lt;/p&gt;
&lt;p&gt;This was different from all the others as it required additional changes to the security settings to allow Backblaze to function as it had before.  Full details of this can be found in their blog post:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://help.backblaze.com/hc/en-us/articles/360009644134-MacOS-10-14-Mojave-FAQ-"&gt;https://help.backblaze.com/hc/en-us/articles/360009644134-MacOS-10-14-Mojave-FAQ-&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;With those changes made, everything seems to be working again.&lt;/p&gt;
</content>
		<summary>&lt;p&gt;A few days ago, I got this notification on my Mac:&lt;/p&gt;</summary>
	</entry>
	<entry>
		<link href="http://www.gep13.co.uk/blog/introducing-cake.dotnettool.module" />
		<id>http://www.gep13.co.uk/blog/introducing-cake.dotnettool.module</id>
		<title>Introducing the Cake.DotNetTool.Module</title>
		<updated>2018-10-12T00:00:00Z</updated>
		<content>&lt;h1 id="what-is-it"&gt;What is it?&lt;/h1&gt;
&lt;p&gt;Back in version &lt;a href="https://github.com/cake-build/cake/releases/tag/v0.13.0"&gt;0.13.0&lt;/a&gt; of Cake a feature known as &lt;a href="https://github.com/cake-build/cake/issues/646"&gt;Module Support&lt;/a&gt; was released.  This provided the ability to both extend and replace some of the built in functionality of Cake.&lt;/p&gt;
&lt;p&gt;One of these extension points is the registration of &lt;a href="http://cakebuild.net/api/Cake.Core.Packaging/IPackageInstaller/"&gt;IPackageInstaller&lt;/a&gt;'s, which deal with installing tools and addins during the Cake Script execution.  The DotNet Tool Module utilizes this extension point to allow tools to be resolved using the &lt;a href="https://docs.microsoft.com/en-us/dotnet/core/tools/dotnet-tool-install"&gt;DotNet CLI&lt;/a&gt;, specifically, the &lt;code&gt;dotnet tool&lt;/code&gt; command.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; The &lt;code&gt;dotnet tool&lt;/code&gt; command deals with the installation of tools.  As a result, it only makes sense for this module to deal with tools, and not addins.&lt;/p&gt;
&lt;h1 id="why-is-this-needed"&gt;Why is this needed?&lt;/h1&gt;
&lt;p&gt;Out of the box, Cake has the ability to install tools and addins from any NuGet source.  This is documented on the &lt;a href="http://cakebuild.net/docs/fundamentals/preprocessor-directives"&gt;Cake Website&lt;/a&gt;.  Recently, &lt;a href="https://github.com/larzw"&gt;Larz White&lt;/a&gt; &lt;a href="http://cakebuild.net/blog/2017/01/cake-paket"&gt;showed&lt;/a&gt; how it was possible to use an alternative package manager, namely &lt;a href="https://fsprojects.github.io/Paket/"&gt;Paket&lt;/a&gt; to install those tools and addins.&lt;/p&gt;
&lt;p&gt;However, there are a growing number of tools that can be installed as Global DotNet Tools (there is a list of these compiled &lt;a href="https://github.com/natemcmaster/dotnet-tools"&gt;here&lt;/a&gt; by Nate McMaster).  Cake itself, is actually published as a DotNet Global Tool.  As part of your build process, you might want to have these tools installed, ready to be used.  However, what I want to be able to do is to define the installation of these tools in the same way as I do my other tools and addins, so that everything is in the same place.  For example, I want to put them right here:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;///////////////////////////////////////////////////////////////////////////////
// TOOLS
///////////////////////////////////////////////////////////////////////////////

#tool nuget:?package=coveralls.io&amp;amp;version=1.3.4
#tool nuget:?package=gitreleasemanager&amp;amp;version=0.5.0
#tool nuget:?package=GitVersion.CommandLine&amp;amp;version=3.6.2
#tool nuget:?package=JetBrains.ReSharper.CommandLineTools&amp;amp;version=2016.3.20161223.160402
#tool nuget:?package=ReSharperReports&amp;amp;version=0.2.0
#tool nuget:?package=KuduSync.NET&amp;amp;version=1.3.1
#tool nuget:?package=Wyam&amp;amp;version=0.16.1
#tool nuget:?package=gitlink&amp;amp;version=2.4.1
#tool nuget:?package=MSBuild.Extension.Pack&amp;amp;version=1.9.0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Along with all the other tools that I use in my build.&lt;/p&gt;
&lt;p&gt;And that is what this Cake Module allows you to do.  You can now add the following:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#tool dotnet:?package=Octopus.DotNet.Cli&amp;amp;version=4.41.0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Which would install version 4.41.0 of the &lt;a href="https://www.nuget.org/packages/Octopus.DotNet.Cli/4.41.0"&gt;Octopus.DotNet.Cli package&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; What is different here is that &lt;code&gt;dotnet&lt;/code&gt; is being used, rather than &lt;code&gt;nuget&lt;/code&gt;.  This is what causes Cake to defer to the DotNet Tool Module, rather than using NuGet to resolve the tool installation.&lt;/p&gt;
&lt;h1 id="installation"&gt;Installation&lt;/h1&gt;
&lt;p&gt;Due to the fact that Cake Modules are extending and altering the internals of the Cake, the Module Assembly needs to be loaded prior to the main Cake execution.  As documented in the &lt;a href="https://cakebuild.net/docs/fundamentals/preprocessor-directives"&gt;Module section of this page&lt;/a&gt;, you simply have to do the following:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;./build.sh --bootstrap
./build.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This means that the first execution of Cake will inspect your Cake script for any module inclusions in your script, and if there are any, download and install them.  And the second execution will then be able to use those modules, and complete the usage of the module.&lt;/p&gt;
&lt;p&gt;An example of a Cake script which both includes the module definition for the DotNet Tool Module, and which also uses it, is shown below:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#module nuget:?package=Cake.DotNetTool.Module&amp;amp;version=0.1.0
#tool &amp;quot;dotnet:?package=Octopus.DotNet.Cli&amp;amp;version=4.41.0&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id="usage"&gt;Usage&lt;/h1&gt;
&lt;p&gt;As mentioned above, installing a tool using the DotNet Tool Module is as simple as:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#tool dotnet:?package=Octopus.DotNet.Cli&amp;amp;version=4.41.0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If the tool in question comes from a different source, you can change that as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#tool dotnet:https://www.myget.org/F/gep13/api/v2?package=Octopus.DotNet.Cli&amp;amp;version=4.41.0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;By default, the DotNet Tool Module will install a tool to the location of the defined Cake Tools folder (this is normally simply a &lt;code&gt;tools&lt;/code&gt; folder located beside the Cake Script that is being executed).  It is possible to control the location of this tools folder in the &lt;a href="https://cakebuild.net/docs/fundamentals/default-configuration-values"&gt;normal way&lt;/a&gt;, and additionally, you can opt to install the DotNet Tool globally using:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#tool dotnet:?package=Octopus.DotNet.Cli&amp;amp;version=4.41.0&amp;amp;global
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Additional parameters that can be passed to the pre-processor directive include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;configfile
&lt;ul&gt;
&lt;li&gt;Specifies which NuGet config file should be used during the execution&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;framework
&lt;ul&gt;
&lt;li&gt;Specifies the &lt;a href="https://docs.microsoft.com/en-us/dotnet/standard/frameworks"&gt;target framework&lt;/a&gt; to install the tool for. By default, the .NET Core SDK tries to choose the most appropriate target framework.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Finally, you can control the logging verbosity of the underlying &lt;code&gt;dotnet tool&lt;/code&gt; command by altering the overall verbosity of the Cake Script execution.  i.e. running:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;./build.sh --verbosity=diagnostic
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;will cause the &lt;code&gt;dotnet tool&lt;/code&gt; command to be ran with diagnostic verbosity as well.&lt;/p&gt;
&lt;p&gt;The parameters that can be used in this pre-processor directive come from the documentation which is available &lt;a href="https://docs.microsoft.com/en-us/dotnet/core/tools/dotnet-tool-install"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="documentation"&gt;Documentation&lt;/h1&gt;
&lt;p&gt;You can find additional documentation for this module here:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://cake-contrib.github.io/Cake.DotNetTool.Module/"&gt;https://cake-contrib.github.io/Cake.DotNetTool.Module/&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="source-code"&gt;Source Code&lt;/h1&gt;
&lt;p&gt;The source code for this Module can be found here:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/cake-contrib/Cake.DotNetTool.Module"&gt;https://github.com/cake-contrib/Cake.DotNetTool.Module&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="chat-room"&gt;Chat Room&lt;/h2&gt;
&lt;p&gt;If you have any questions about this Module, then please feel to drop into the Gitter Chat room for all the addins and modules which exist in the &lt;a href="https://github.com/cake-contrib"&gt;cake-contrib organisation&lt;/a&gt; on GitHub:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://gitter.im/cake-contrib/Lobby?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge"&gt;&lt;img src="https://badges.gitter.im/cake-contrib/Lobby.svg" class="img-fluid" alt="Join the chat at https://gitter.im/cake-contrib/Lobby" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="other-cake-modules"&gt;Other Cake Modules&lt;/h2&gt;
&lt;p&gt;There are a number of other Cake Modules that perform similar functionality for other Package Managers, for example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.nuget.org/packages/Cake.Paket.Module/"&gt;Cake.Paket.Module&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.nuget.org/packages/Cake.Chocolatey.Module/"&gt;Cake.Chocolatey.Module&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.nuget.org/packages/Cake.DNF.Module/"&gt;Cake.DNF.Module&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.nuget.org/packages/Cake.APT.Module/"&gt;Cake.APT.Module&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.nuget.org/packages/Cake.Npm.Module/0.1.0-unstable0014"&gt;Cake.Npm.Module&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
		<summary>&lt;p&gt;Back in version &lt;a href="https://github.com/cake-build/cake/releases/tag/v0.13.0"&gt;0.13.0&lt;/a&gt; of Cake a feature known as &lt;a href="https://github.com/cake-build/cake/issues/646"&gt;Module Support&lt;/a&gt; was released.  This provided the ability to both extend and replace some of the built in functionality of Cake.&lt;/p&gt;</summary>
	</entry>
	<entry>
		<link href="http://www.gep13.co.uk/blog/mvp-rd-wall-at-msignite" />
		<id>http://www.gep13.co.uk/blog/mvp-rd-wall-at-msignite</id>
		<title>MVP and RD Wall at Microsoft Ignite</title>
		<updated>2018-09-30T00:00:00Z</updated>
		<content>&lt;p&gt;Last week there was a flurry of pictures on Twitter and Facebook from the &lt;a href="https://www.microsoft.com/en-us/ignite"&gt;Microsoft Ignite&lt;/a&gt; Conference, and one in particular caught my eye.&lt;/p&gt;
&lt;h1 id="mvp-and-rd-wall"&gt;MVP and RD Wall&lt;/h1&gt;
&lt;p&gt;It was this picture:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://gep13wpstorage.blob.core.windows.net/gep13/2018/09/30/mvp_rd_wall.jpg" class="img-fluid" alt="MVP and RD Wall" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; Full credit to Joel Lindström on Facebook for this photo&lt;/p&gt;
&lt;p&gt;It was pointed out to me on Twitter by &lt;a href="https://twitter.com/punker76/status/1044343384503209988"&gt;Jan Karger&lt;/a&gt; that my name was included in the wall.  A quick check, and indeed I could see my name:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://gep13wpstorage.blob.core.windows.net/gep13/2018/09/30/gep13_mvp_rd_wall.png" class="img-fluid" alt="My name on the wall" /&gt;&lt;/p&gt;
&lt;p&gt;I had no idea that Microsoft did this, and I really think it is a nice touch, to show appreciation to all the MVP's and Regional Directors.&lt;/p&gt;
</content>
		<summary>&lt;p&gt;Last week there was a flurry of pictures on Twitter and Facebook from the &lt;a href="https://www.microsoft.com/en-us/ignite"&gt;Microsoft Ignite&lt;/a&gt; Conference, and one in particular caught my eye.&lt;/p&gt;</summary>
	</entry>
	<entry>
		<link href="http://www.gep13.co.uk/blog/hacktoberfest-meetup-2018" />
		<id>http://www.gep13.co.uk/blog/hacktoberfest-meetup-2018</id>
		<title>Hacktoberfest Meetup 2018</title>
		<updated>2018-09-26T00:00:00Z</updated>
		<content>&lt;p&gt;Aberdeen Developers .Net User Group are proud to be hosting a Hacktoberfest event on the 4th October 2018.  Full details of the event can be found on the &lt;a href="https://www.meetup.com/Aberdeen-Developers-NET-User-Group/events/254881639/"&gt;Meetup page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://secure.meetupstatic.com/photos/event/b/f/6/6/highres_474768998.jpeg" class="img-fluid" alt="Hacktoberfest" /&gt;&lt;/p&gt;
&lt;h1 id="what-is-hacktoberfest"&gt;What is Hacktoberfest?&lt;/h1&gt;
&lt;p&gt;For the last 4 years, DigitalOcean (in conjunction with GitHub) have been running an event called Hacktoberfest. It is a month long event where you are encouraged to contribute to Open Source Projects (hosted on GitHub) and in return you get some cool swag (typically a t-shirt and some stickers). All you have to do is submit 5 pull requests to projects on GitHub during the month of October. Registration for the event is completely free. More information on this event can be found here: &lt;a href="https://hacktoberfest.digitalocean.com/"&gt;https://hacktoberfest.digitalocean.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I have personally taken part in this event for the last three years, and I can vouch for the quality of the swag that you can get your hands on.&lt;/p&gt;
&lt;h1 id="ok-so-what-do-i-get-out-of-it"&gt;Ok, so what do I get out of it?&lt;/h1&gt;
&lt;p&gt;First up, you will need to &lt;a href="https://hacktoberfest.digitalocean.com/"&gt;register&lt;/a&gt; to indicate that you are going to be participating in the event.  If you open up five pull requests between October 1 and October 31, you will get a free, limited edition Hacktoberfest t-shirt. &lt;strong&gt;NOTE:&lt;/strong&gt; These pull requests do not need to be merged in order to be counted.  They just need to be opened during the time frame of the event.&lt;/p&gt;
&lt;p&gt;In case you needed any further encouragement, you also have the ability to grab a free limited edition Microsoft t-shirt, which has been designed by &lt;a href="https://github.com/ashleymcnamara"&gt;Ashley McNamara&lt;/a&gt;.  This was announced by Microsoft in this &lt;a href="https://open.microsoft.com/2018/09/18/hacktoberfest-2018-microsoft/"&gt;blog post&lt;/a&gt;.  The rule for this t-shirt is simply to open a single pull request in one of the MANY open source repositories that Microsoft have.  A full list of these can be found in the linked blog post.&lt;/p&gt;
&lt;h1 id="what-is-going-to-happen-at-the-event"&gt;What is going to happen at the event?&lt;/h1&gt;
&lt;p&gt;The event is going to start with me doing a very brief introduction to contributing to Open Source.  This is something I have been involved in for almost 7 years now, and I am now actually working for a company based on the creation of Open Source software, so I have some great, and not so great, stories to tell about it.  We will walk through the basics of doing your first pull request, and answer any questions you might have.&lt;/p&gt;
&lt;p&gt;With that out of the way, we will then jump straight into contributing to Open Source projects.  If you have a particular project in mind that's great.  If not, I can point you in the direction of some projects that I know need some help.&lt;/p&gt;
&lt;h1 id="how-do-i-sign-up-for-the-event"&gt;How do I sign up for the event?&lt;/h1&gt;
&lt;p&gt;Simply visit the &lt;a href="https://www.meetup.com/Aberdeen-Developers-NET-User-Group/events/254881639/"&gt;Meetup page&lt;/a&gt;, and indicate that you will be attending.  The number of registrations for this event is smaller than normal, but this is due to the space that we have access to.  So I would ask that you only attend the event if you have every intention of completing the Hacktoberfest event.&lt;/p&gt;
&lt;h1 id="what-should-i-bring-with-me"&gt;What should I bring with me?&lt;/h1&gt;
&lt;p&gt;The only thing that you are going to need in order to participate in this event is yourself, your laptop, and some ideas about the Open Source Projects that you would like to contribute to.  Drinks and some snacks will be being provided by &lt;a href="https://www.codify.ltd.uk/"&gt;Codify&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Hopefully see you there, and feel free to reach out with any questions you might have.&lt;/p&gt;
</content>
		<summary>&lt;p&gt;Aberdeen Developers .Net User Group are proud to be hosting a Hacktoberfest event on the 4th October 2018.  Full details of the event can be found on the &lt;a href="https://www.meetup.com/Aberdeen-Developers-NET-User-Group/events/254881639/"&gt;Meetup page&lt;/a&gt;.&lt;/p&gt;</summary>
	</entry>
	<entry>
		<link href="http://www.gep13.co.uk/blog/problem-running-chocolatey-test-environment" />
		<id>http://www.gep13.co.uk/blog/problem-running-chocolatey-test-environment</id>
		<title>Problem Running Chocolatey Test Environment</title>
		<updated>2018-07-27T00:00:00Z</updated>
		<content>&lt;p&gt;During a &lt;a href="https://gitter.im/chocolatey/choco?at=5b59cf471be9bb57bcc5a6e4"&gt;Gitter discussion&lt;/a&gt; yesterday, an interesting
point of discussion came up, so I thought I would capture it here in a blog post.  The short version is that you
probably want to make sure that you are using the latest version of Vagrant when trying to use the Chocolatey Test
Environment, although bear in mind that this might not have been tested by anyone, and may have other problems :-).&lt;/p&gt;
&lt;h2 id="the-problem"&gt;The Problem&lt;/h2&gt;
&lt;p&gt;When the Chocolatey Community member was trying to run the &lt;a href="https://github.com/chocolatey/chocolatey-test-environment"&gt;Chocolatey Test Environment&lt;/a&gt;
on his Windows 10 machine, they were running into the following error:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-sh"&gt;Bringing machine 'default' up with 'virtualbox' provider...
 ==&amp;gt; default: Box 'ferventcoder/win2012r2-x64-nocm' could not be found. Attempting to find and install...
    default: Box Provider: virtualbox
    default: Box Version: &amp;gt;= 0
The box 'ferventcoder/win2012r2-x64-nocm' could not be found or
could not be accessed in the remote catalog. If this is a private
box on HashiCorp's Atlas, please verify you're logged in via
`vagrant login`. Also, please double-check the name. The expanded
URL and error message are shown below:

URL: [&amp;quot;https://atlas.hashicorp.com/ferventcoder/win2012r2-x64-nocm&amp;quot;]
Error: The requested URL returned error: 404 Not Found
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Going to the URL shown in the output above, it did indeed result in a 404.  However, a quick
search of the Vagrant Cloud showed that the base box did in fact exist.  You can find it here:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://app.vagrantup.com/ferventcoder/boxes/win2012r2-x64-nocm"&gt;https://app.vagrantup.com/ferventcoder/boxes/win2012r2-x64-nocm&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A further test on my own machine, resulted in the following output:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-sh"&gt;Bringing machine 'default' up with 'virtualbox' provider...
==&amp;gt; default: Box 'ferventcoder/win2012r2-x64-nocm' could not be found. Attempting to find and install...
default: Box Provider: virtualbox
default: Box Version: &amp;gt;= 0
==&amp;gt; default: Loading metadata for box 'ferventcoder/win2012r2-x64-nocm'
default: URL: https://vagrantcloud.com/ferventcoder/win2012r2-x64-nocm
==&amp;gt; default: Adding box 'ferventcoder/win2012r2-x64-nocm' (v1.0.0) for provider: virtualbox
default: Downloading: https://vagrantcloud.com/ferventcoder/boxes/win2012r2-x64-nocm/versions/1.0.0/providers/virtualbox.box
default: Progress: 1% (Rate: 2764k/s, Estimated time remaining: 0:30:03)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Which correctly worked.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; The difference in the download URL's.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://atlas.hashicorp.com/ferventcoder/win2012r2-x64-nocm"&gt;https://atlas.hashicorp.com/ferventcoder/win2012r2-x64-nocm&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;compared to:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://vagrantcloud.com/ferventcoder/win2012r2-x64-nocm"&gt;https://vagrantcloud.com/ferventcoder/win2012r2-x64-nocm&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="the-solution"&gt;The Solution&lt;/h2&gt;
&lt;p&gt;After a bit of digging, it turns out that the Chocolatey Community Member was following the
instructions in the README.md of the linked repository, which suggests using 1.8.1 of vagrant,
where as I was using version 2.0.1.  My guess was that there was &amp;quot;something&amp;quot; in the earlier
version of the vagrant client which no longer worked, i.e. a URL redirect was no longer in place.&lt;/p&gt;
&lt;p&gt;Turns out that this &amp;quot;guess&amp;quot; was pretty much spot on.  Rob Reynolds was able to confirm this by
pointing out this Google Groups post:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://groups.google.com/forum/#!msg/vagrant-up/H8C68UTkosU/qz4YUmAgBAAJ"&gt;https://groups.google.com/forum/#!msg/vagrant-up/H8C68UTkosU/qz4YUmAgBAAJ&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So bascially, if you are wanting to run an earlier version of the Vagrant client, you are going
to need to set the following environment variable:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-sh"&gt;# macOS and Linux
export VAGRANT_SERVER_URL=&amp;quot;https://vagrantcloud.com&amp;quot;

# Windows (CMD)
set VAGRANT_SERVER_URL=&amp;quot;https://vagrantcloud.com&amp;quot;

# Windows (Powershell)
$env:VAGRANT_SERVER_URL=&amp;quot;https://vagrantcloud.com&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Or, upgrade to a newer version of Vagrant.&lt;/p&gt;
&lt;h2 id="the-outcome"&gt;The Outcome&lt;/h2&gt;
&lt;p&gt;I am going to update the Chocolatey Test Environment repository to include some of this
information, so that other people don't also run into this problem.&lt;/p&gt;
</content>
		<summary>&lt;p&gt;During a &lt;a href="https://gitter.im/chocolatey/choco?at=5b59cf471be9bb57bcc5a6e4"&gt;Gitter discussion&lt;/a&gt; yesterday, an interesting
point of discussion came up, so I thought I would capture it here in a blog post.  The short version is that you
probably want to make sure that you are using the latest version of Vagrant when trying to use the Chocolatey Test
Environment, although bear in mind that this might not have been tested by anyone, and may have other problems :-).&lt;/p&gt;</summary>
	</entry>
	<entry>
		<link href="http://www.gep13.co.uk/blog/are-you-coming-to-chocolateyfest" />
		<id>http://www.gep13.co.uk/blog/are-you-coming-to-chocolateyfest</id>
		<title>Are you coming to Chocolatey Fest?</title>
		<updated>2018-07-18T00:00:00Z</updated>
		<content>&lt;p&gt;When I joined Chocolatey, I knew I was going to be in for an exciting ride, and so far, I have not been disappointed.  To date, I have been able to work on some exciting new features that are due out later this year, and I attended the PowerShell Summit, and interacted directly with people using Chocolatey.  Looking forward, the thing I am most looking forward to in 2018 is &lt;a href="https://chocolateyfest.com/"&gt;Chocolatey Fest&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="what-is-chocolatey-fest"&gt;What is Chocolatey Fest?&lt;/h2&gt;
&lt;p&gt;Chocolatey Fest is the first ever independent conference in North America focused exclusively on Windows Automation (WinOps).  It is a one day event, which is going to be hosted at the Park Central Hotel in San Francisco, on the 8th October 2018.  I am planning on travelling to attend this event, and I very much looking forward to hearing about how people are using Chocolatey personally and in their Organisations, as well as the larger picture about Windows Automation.  I have a feeling that this is going to be a great event, and I would encourage you if you are in the area, to come along and join in.&lt;/p&gt;
&lt;p&gt;If you are interested in attending, you can find the registration page &lt;a href="https://chocolateyfest.com/register"&gt;here&lt;/a&gt;.  Will yours be the Golden Ticket?&lt;/p&gt;
&lt;h2 id="will-willy-wonka-make-an-appearance"&gt;Will Willy Wonka make an appearance?&lt;/h2&gt;
&lt;p&gt;You never know who you might see at the event:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://pbs.twimg.com/media/Dd67CnHU0AAm11-.jpg" class="img-fluid" alt="Rob Reynolds dressed as Willy Wonka for Halloween" title="Rob Reynolds dressed as Willy Wonka for Halloween" /&gt;&lt;/p&gt;
&lt;h2 id="announcement-blog-post"&gt;Announcement Blog Post&lt;/h2&gt;
&lt;p&gt;For more information about the event, check out the official announcement blog post of &lt;a href="https://chocolatey.org/blog/chocolatey-fest-conference-coming-october-8"&gt;chocolatey.org&lt;/a&gt;.&lt;/p&gt;
</content>
		<summary>&lt;p&gt;When I joined Chocolatey, I knew I was going to be in for an exciting ride, and so far, I have not been disappointed.  To date, I have been able to work on some exciting new features that are due out later this year, and I attended the PowerShell Summit, and interacted directly with people using Chocolatey.  Looking forward, the thing I am most looking forward to in 2018 is &lt;a href="https://chocolateyfest.com/"&gt;Chocolatey Fest&lt;/a&gt;.&lt;/p&gt;</summary>
	</entry>
	<entry>
		<link href="http://www.gep13.co.uk/blog/how-to-get-console-output-from-wpf-application" />
		<id>http://www.gep13.co.uk/blog/how-to-get-console-output-from-wpf-application</id>
		<title>How to get console output from a WPF application</title>
		<updated>2018-07-16T00:00:00Z</updated>
		<content>&lt;p&gt;While implementing a recent feature addition to &lt;a href="https://github.com/chocolatey/ChocolateyGUI/pull/613"&gt;Chocolatey GUI&lt;/a&gt;, I stumbled across something that I thought was blog worthy, so I thought I would add some notes here for future me.&lt;/p&gt;
&lt;h2 id="the-problem"&gt;The problem&lt;/h2&gt;
&lt;p&gt;Chocolatey GUI is a WPF application, but the feature that was being added here was the ability to execute Chocolatey GUI from the command line in order to enable/disable features within the application.  i.e. you will be able to run commands like the following:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;chocolateygui feature enable -n=&amp;lt;featureName&amp;gt;
chocolateygui feature disable -n=&amp;lt;featureName&amp;gt;
chocolateygui feature list
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When I first started writing this feature, I thought that this was going to be simple.  What I didn't know is that when compiled with an &lt;code&gt;OutputType&lt;/code&gt; of &lt;code&gt;WinExe&lt;/code&gt;, which a WPF application is, it doesn't output anything to the console.  As a result, trying to do something like:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;Console.Write(&amp;quot;This is a test&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;results in nothing happening.  There are also no errors at runtime, so it is not immediately clear what is going on.&lt;/p&gt;
&lt;h2 id="the-solution"&gt;The solution&lt;/h2&gt;
&lt;p&gt;Thankfully, after searching around, it was clear that I wasn't the first person to stumble into this.  There are a number of different solutions out there (including attempting to attach to the existing console, creating a new console, etc.), however, none of them felt quite right until I found this article:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://blog.rsuter.com/write-application-can-act-console-application-wpf-gui-application/"&gt;https://blog.rsuter.com/write-application-can-act-console-application-wpf-gui-application/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Huge thanks to Rico Suter for this!&lt;/p&gt;
&lt;p&gt;The magic sauce that makes this work is this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;    [DllImport(&amp;quot;kernel32.dll&amp;quot;, SetLastError = true, ExactSpelling = true)]
    static extern bool FreeConsole();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This pinvoke call is completely opposite to how I was originally thinking about it.  Rather than attempting to attach to an existing console, or create a new one, this technique starts out assuming that there is a console, and if that console isn't required, get rid of it.  i.e. &lt;code&gt;FreeConsole&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In order for this to work, it is necessary to change the output type of you WPF project to be a Console Application, and also add an &lt;code&gt;InitialzeComponent()&lt;/code&gt; call.&lt;/p&gt;
&lt;p&gt;For Chocolatey GUI, the startup code then looks like the following:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;        public App()
        {
            InitializeComponent();
        }

        internal static SplashScreen SplashScreen { get; set; }

        [STAThread]
        public static void Main(string[] args)
        {
            if (args.Length != 0)
            {
                // Run as Console Application
                ParseArgumentsAndRunCommand(args);
            }
            else
            {
                // Run as WPF Application
                FreeConsole();

                // Do Stuff
            }
        }

        [DllImport(&amp;quot;kernel32.dll&amp;quot;, SetLastError = true, ExactSpelling = true)]
        private static extern bool FreeConsole();

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Check the &lt;a href="https://github.com/chocolatey/ChocolateyGUI/pull/613"&gt;Pull Request&lt;/a&gt; to Chocolatey GUI for the complete implementation.&lt;/p&gt;
</content>
		<summary>&lt;p&gt;While implementing a recent feature addition to &lt;a href="https://github.com/chocolatey/ChocolateyGUI/pull/613"&gt;Chocolatey GUI&lt;/a&gt;, I stumbled across something that I thought was blog worthy, so I thought I would add some notes here for future me.&lt;/p&gt;</summary>
	</entry>
</feed>